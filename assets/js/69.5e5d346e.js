(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{555:function(s,t,e){"use strict";e.r(t);var a=e(19),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"数据存储原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据存储原理"}},[s._v("#")]),s._v(" 数据存储原理")]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbase%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84.png?lastModify=1573631775#height=722&id=u46Xj&originHeight=722&originWidth=1391&originalType=binary&ratio=1&status=done&style=none&width=1391",alt:""}})]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbase_data_storage-1565601156263.png?lastModify=1573631775#height=687&id=CUzQA&originHeight=687&originWidth=1540&originalType=binary&ratio=1&status=done&style=none&width=1540",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("一个HRegionServer会负责管理很多个region")]),s._v(" "),e("li",[s._v("一个"),e("strong",[s._v("region")]),s._v("包含很多个store\n"),e("ul",[e("li",[s._v("一个"),e("strong",[s._v("列族")]),s._v("就划分成一个"),e("strong",[s._v("store")])]),s._v(" "),e("li",[s._v("如果一个表中只有1个列族，那么每一个region中只有一个store")]),s._v(" "),e("li",[s._v("如果一个表中有N个列族，那么每一个region中有N个store")])])]),s._v(" "),e("li",[s._v("一个store里面只有一个memstore\n"),e("ul",[e("li",[s._v("memstore是一块"),e("strong",[s._v("内存区域")]),s._v("，写入的数据会先写入memstore进行缓冲，然后再把数据刷到磁盘")])])]),s._v(" "),e("li",[s._v("一个store里面有很多个"),e("strong",[s._v("StoreFile")]),s._v(", 最后数据是以很多个"),e("strong",[s._v("HFile")]),s._v("这种数据结构的文件保存在HDFS上\n"),e("ul",[e("li",[s._v("StoreFile是HFile的抽象对象，如果说到StoreFile就等于HFile")]),s._v(" "),e("li",[s._v("每次memstore刷写数据到磁盘，就生成对应的一个新的HFile文件出来")])])])]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/region.png?lastModify=1573631775#height=682&id=ar4c5&originHeight=682&originWidth=1427&originalType=binary&ratio=1&status=done&style=none&width=1427",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"读数据流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读数据流程"}},[s._v("#")]),s._v(" 读数据流程")]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbase%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png?lastModify=1573631775#height=711&id=QF6Sk&originHeight=711&originWidth=1411&originalType=binary&ratio=1&status=done&style=none&width=1411",alt:""}})]),s._v(" "),e("blockquote",[e("p",[s._v("说明：HBase集群，只有一张meta表，此表只有一个region，该region数据保存在一个HRegionServer上")])]),s._v(" "),e("ul",[e("li",[s._v("1、客户端首先与zk进行连接；从zk找到meta表的region位置，即meta表的数据存储在某一HRegionServer上；客户端与此HRegionServer建立连接，然后读取meta表中的数据；meta表中存储了所有用户表的region信息，我们可以通过"),e("code",[s._v("scan 'hbase:meta'")]),s._v("来查看meta表信息")]),s._v(" "),e("li",[s._v("2、根据要查询的namespace、表名和rowkey信息。找到写入数据对应的region信息")]),s._v(" "),e("li",[s._v("3、找到这个region对应的regionServer，然后发送请求")]),s._v(" "),e("li",[s._v("4、查找并定位到对应的region")]),s._v(" "),e("li",[s._v("5、先从memstore查找数据，如果没有，再从BlockCache上读取\n"),e("ul",[e("li",[s._v("HBase上Regionserver的内存分为两个部分\n"),e("ul",[e("li",[s._v("一部分作为Memstore，主要用来写；")]),s._v(" "),e("li",[s._v("另外一部分作为BlockCache，主要用于读数据；")])])])])]),s._v(" "),e("li",[s._v("6、如果BlockCache中也没有找到，再到StoreFile上进行读取\n"),e("ul",[e("li",[s._v("从storeFile中读取到数据之后，不是直接把结果数据返回给客户端，而是把数据先写入到BlockCache中，目的是为了加快后续的查询；然后在返回结果给客户端。")])])])]),s._v(" "),e("h2",{attrs:{id:"写数据流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写数据流程"}},[s._v("#")]),s._v(" 写数据流程")]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbase%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png?lastModify=1573631775#height=694&id=aQ6Va&originHeight=694&originWidth=1546&originalType=binary&ratio=1&status=done&style=none&width=1546",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("1、客户端首先从zk找到meta表的region位置，然后读取meta表中的数据，meta表中存储了用户表的region信息")]),s._v(" "),e("li",[s._v("2、根据namespace、表名和rowkey信息。找到写入数据对应的region信息")]),s._v(" "),e("li",[s._v("3、找到这个region对应的regionServer，然后发送请求")]),s._v(" "),e("li",[s._v("4、把数据分别写到HLog（write ahead log）和memstore各一份")]),s._v(" "),e("li",[s._v("5、memstore达到阈值后把数据刷到磁盘，生成storeFile文件")]),s._v(" "),e("li",[s._v("6、删除HLog中的历史数据")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("补充：\nHLog（write ahead log）：\n  也称为WAL意为Write ahead log，类似mysql中的binlog,用来做灾难恢复时用，HLog记录数据的所有变更,一旦数据修改，就可以从log中进行恢复。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#机制"}},[s._v("#")]),s._v(" 机制")]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbase-split-compaction.png#height=756&id=kYING&originHeight=756&originWidth=1046&originalType=binary&ratio=1&status=done&style=none&width=1046",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"flush触发条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flush触发条件"}},[s._v("#")]),s._v(" Flush触发条件")]),s._v(" "),e("ul",[e("li",[s._v("memstore级别限制")])]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--\n\t当Region中任意一个MemStore的大小达到了上限（hbase.hregion.memstore.flush.size，默认128MB），会触发Memstore刷新。\n--\x3e")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("hbase.hregion.memstore.flush.size"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("134217728"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("region级别限制")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!--\n\t当Region中所有Memstore的大小总和达到了上限（hbase.hregion.memstore.block.multiplier * hbase.hregion.memstore.flush.size，默认 2* 128M = 256M），会触发memstore刷新。\n--\x3e\n<property>\n\t<name>hbase.hregion.memstore.flush.size</name>\n\t<value>134217728</value>\n</property>\n<property>\n\t<name>hbase.hregion.memstore.block.multiplier</name>\n\t<value>2</value>\n</property>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("ul",[e("li",[s._v("Region Server级别限制")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!--\n  - 当一个Region Server中所有Memstore的大小总和超过低水位阈值hbase.regionserver.global.memstore.size.lower.limit*hbase.regionserver.global.memstore.size（前者默认值0.95），RegionServer开始强制flush；\n  - 先Flush Memstore最大的Region，再执行次大的，依次执行；\n  - 如写入速度大于flush写出的速度，导致总MemStore大小超过高水位阈值hbase.regionserver.global.memstore.size（默认为JVM内存的40%），此时RegionServer会阻塞更新并强制执行flush，直到总MemStore大小低于低水位阈值\n--\x3e\n<property>\n\t<name>hbase.regionserver.global.memstore.size.lower.limit</name>\n\t<value>0.95</value>\n</property>\n<property>\n\t<name>hbase.regionserver.global.memstore.size</name>\n\t<value>0.4</value>\n</property>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("ul",[e("li",[s._v("HLog数量上限\n"),e("ul",[e("li",[s._v("当一个Region Server中HLog数量达到上限（可通过参数hbase.regionserver.maxlogs配置）时，系统会选取最早的一个 HLog对应的一个或多个Region进行flush")])])]),s._v(" "),e("li",[s._v("定期刷新Memstore\n"),e("ul",[e("li",[s._v("默认周期为1小时，确保Memstore不会长时间没有持久化。为避免所有的MemStore在同一时间都进行flush导致的问题，定期的flush操作有20000左右的随机延时。")])])]),s._v(" "),e("li",[s._v("手动flush\n"),e("ul",[e("li",[s._v("用户可以通过shell命令"),e("code",[s._v("flush ‘tablename’")]),s._v("或者"),e("code",[s._v("flush ‘region name’")]),s._v("分别对一个表或者一个Region进行flush。")])])])]),s._v(" "),e("h3",{attrs:{id:"flush的流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flush的流程"}},[s._v("#")]),s._v(" Flush的流程")]),s._v(" "),e("ul",[e("li",[s._v("为了减少flush过程对读写的影响，将整个flush过程分为三个阶段：\n"),e("ul",[e("li",[s._v("prepare阶段：遍历当前Region中所有的Memstore，将Memstore中当前数据集CellSkipListSet做一个"),e("strong",[s._v("快照snapshot")]),s._v("；然后再新建一个CellSkipListSet。后期写入的数据都会写入新的CellSkipListSet中。prepare阶段需要加一把updateLock对"),e("strong",[s._v("写请求阻塞")]),s._v("，结束之后会释放该锁。因为此阶段没有任何费时操作，因此持锁时间很短。")]),s._v(" "),e("li",[s._v("flush阶段：遍历所有Memstore，将prepare阶段生成的snapshot持久化为"),e("strong",[s._v("临时文件")]),s._v("，临时文件会统一放到目录.tmp下。这个过程因为涉及到磁盘IO操作，因此相对比较耗时。")]),s._v(" "),e("li",[s._v("commit阶段：遍历所有Memstore，将flush阶段生成的临时文件移到指定的ColumnFamily目录下，针对HFile生成对应的storefile和Reader，把storefile添加到HStore的storefiles列表中，最后再"),e("strong",[s._v("清空")]),s._v("prepare阶段生成的snapshot。")])])])]),s._v(" "),e("h3",{attrs:{id:"compact合并机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compact合并机制"}},[s._v("#")]),s._v(" Compact合并机制")]),s._v(" "),e("ul",[e("li",[s._v("hbase为了防止小文件过多，以保证查询效率，hbase需要在必要的时候将这些小的store file合并成相对较大的store file，这个过程就称之为compaction。")])]),s._v(" "),e("h4",{attrs:{id:"minor-compaction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minor-compaction"}},[s._v("#")]),s._v(" minor compaction")]),s._v(" "),e("ul",[e("li",[s._v("在将Store中多个HFile合并为一个HFile\n在这个过程中会选取一些小的、相邻的StoreFile将他们合并成一个更大的StoreFile，对于超过了TTL的数据、更新的数据、删除的数据仅仅只是做了标记。并没有进行物理删除，一次Minor Compaction的结果是更少并且更大的StoreFile。这种合并的触发频率很高。")]),s._v(" "),e("li",[s._v("minor compaction触发条件由以下几个参数共同决定：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\x3c!--表示至少需要三个满足条件的store file时，minor compaction才会启动--\x3e\n<property>\n\t<name>hbase.hstore.compactionThreshold</name>\n\t<value>3</value>\n</property>\n\n\x3c!--表示一次minor compaction中最多选取10个store file--\x3e\n<property>\n\t<name>hbase.hstore.compaction.max</name>\n\t<value>10</value>\n</property>\n\n\x3c!--默认值为128m,\n表示文件大小小于该值的store file 一定会加入到minor compaction的store file中\n--\x3e\n<property>\n\t<name>hbase.hstore.compaction.min.size</name>\n\t<value>134217728</value>\n</property>\n\n\x3c!--默认值为LONG.MAX_VALUE，\n表示文件大小大于该值的store file 一定会被minor compaction排除--\x3e\n<property>\n\t<name>hbase.hstore.compaction.max.size</name>\n\t<value>9223372036854775807</value>\n</property>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("h4",{attrs:{id:"major-compaction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#major-compaction"}},[s._v("#")]),s._v(" major compaction")]),s._v(" "),e("ul",[e("li",[s._v("合并Store中所有的HFile为一个HFile\n将所有的StoreFile合并成一个StoreFile，这个过程还会清理三类无意义数据：被删除的数据、TTL过期数据、版本号超过设定版本号的数据。合并频率比较低，默认7天执行一次，并且性能消耗非常大，建议生产关闭(设置为0)，在应用空闲时间手动触发。一般可以是手动控制进行合并，防止出现在业务高峰期。")]),s._v(" "),e("li",[s._v("major compaction触发时间条件")])]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\x3c!--默认值为7天进行一次大合并，--\x3e")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("hbase.hregion.majorcompaction"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("604800000"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("手动触发")])]),s._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##使用major_compact命令")]),s._v("\nmajor_compact tableName\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"region-拆分机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#region-拆分机制"}},[s._v("#")]),s._v(" region 拆分机制")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("region中存储的是大量的rowkey数据 ,当region中的数据条数过多的时候,直接影响查询效率.当region过大的时候.hbase会拆分region , 这也是Hbase的一个优点 .")])]),s._v(" "),e("li",[e("p",[s._v("HBase的region split策略一共有以下几种：")])]),s._v(" "),e("li",[e("p",[s._v("1、"),e("strong",[s._v("ConstantSizeRegionSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("0.94版本前默认切分策略")])])]),s._v(" "),e("li",[e("p",[s._v("当region大小大于某个阈值(hbase.hregion.max.filesize=10G)之后就会触发切分，一个region等分为2个region。")]),s._v(" "),e("ul",[e("li",[s._v("但是在生产线上这种切分策略却有相当大的弊端：切分策略对于大表和小表没有明显的区分。阈值(hbase.hregion.max.filesize)设置较大对大表比较友好，但是小表就有可能不会触发分裂，极端情况下可能就1个，这对业务来说并不是什么好事。如果设置较小则对小表友好，但一个大表就会在整个集群产生大量的region，这对于集群的管理、资源使用、failover来说都不是一件好事。")])])]),s._v(" "),e("li",[e("p",[s._v("2、"),e("strong",[s._v("IncreasingToUpperBoundRegionSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("0.94版本~2.0版本默认切分策略")]),s._v(" "),e("li",[s._v("切分策略稍微有点复杂，总体看和ConstantSizeRegionSplitPolicy思路相同，一个region大小大于设置阈值就会触发切分。但是这个阈值并不像ConstantSizeRegionSplitPolicy是一个固定的值，而是会在一定条件下不断调整，调整规则和region所属表在当前regionserver上的region个数有关系.")]),s._v(" "),e("li",[s._v("region split的计算公式是：\nregioncount^3 _ 128M _ 2，当region达到该size的时候进行split\n例如：\n第一次split：1^3 * 256 = 256MB\n第二次split：2^3 * 256 = 2048MB\n第三次split：3^3 * 256 = 6912MB\n第四次split：4^3 * 256 = 16384MB > 10GB，因此取较小的值10GB\n后面每次split的size都是10GB了")])])]),s._v(" "),e("li",[e("p",[s._v("3、"),e("strong",[s._v("SteppingSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("2.0版本默认切分策略")]),s._v(" "),e("li",[s._v("这种切分策略的切分阈值又发生了变化，相比 IncreasingToUpperBoundRegionSplitPolicy 简单了一些，依然和待分裂region所属表在当前regionserver上的region个数有关系，如果region个数等于1，\n切分阈值为flush size * 2，否则为MaxRegionFileSize。这种切分策略对于大集群中的大表、小表会比 IncreasingToUpperBoundRegionSplitPolicy 更加友好，小表不会再产生大量的小region，而是适可而止。")])])]),s._v(" "),e("li",[e("p",[s._v("4、"),e("strong",[s._v("KeyPrefixRegionSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("根据rowKey的前缀对数据进行分组，这里是指定rowKey的前多少位作为前缀，比如rowKey都是16位的，指定前5位是前缀，那么前5位相同的rowKey在进行region split的时候会分到相同的region中。")])])]),s._v(" "),e("li",[e("p",[s._v("5、"),e("strong",[s._v("DelimitedKeyPrefixRegionSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("保证相同前缀的数据在同一个region中，例如rowKey的格式为：userid_eventtype_eventid，指定的delimiter为 _ ，则split的的时候会确保userid相同的数据在同一个region中。")])])]),s._v(" "),e("li",[e("p",[s._v("6、"),e("strong",[s._v("DisabledRegionSplitPolicy")])]),s._v(" "),e("ul",[e("li",[s._v("不启用自动拆分, 需要指定手动拆分")])])])]),s._v(" "),e("h2",{attrs:{id:"表的预分区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表的预分区"}},[s._v("#")]),s._v(" 表的预分区")]),s._v(" "),e("ul",[e("li",[s._v("当一个table刚被创建的时候，Hbase默认的分配一个region给table。也就是说这个时候，所有的读写请求都会访问到同一个regionServer的同一个region中，这个时候就达不到负载均衡的效果了，集群中的其他regionServer就可能会处于比较空闲的状态。\n"),e("ul",[e("li",[s._v("解决这个问题可以用"),e("strong",[s._v("pre-splitting")]),s._v(",在创建table的时候就配置好，生成多个region。")])])]),s._v(" "),e("li",[s._v("为何要预分区？\n"),e("ul",[e("li",[s._v("增加数据读写效率")]),s._v(" "),e("li",[s._v("负载均衡，防止数据倾斜")]),s._v(" "),e("li",[s._v("方便集群容灾调度region")]),s._v(" "),e("li",[s._v("优化Map数量")])])]),s._v(" "),e("li",[s._v("每一个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region维护。")])]),s._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" 创建表，指定预分区\ncreate "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'person'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'info1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'info2'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SPLITS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'4000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" 根据文件内容预分区\ncat "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("kfly"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("install"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("split"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("txt\n  aaa\n  bbb\n  ccc\n  ddd\ncreate "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'student'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'info'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SPLITS_FILE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/kfly/install/split.txt'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[s._v("HexStringSplit 算法\n"),e("ul",[e("li",[s._v("HexStringSplit会将数据从“00000000”到“FFFFFFFF”之间的数据长度按照"),e("strong",[s._v("n等分")]),s._v("之后算出每一段的其实rowkey和结束rowkey，以此作为拆分点。")])])])]),s._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[s._v("create "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'mytable'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'base_info'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' extra_info'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NUMREGIONS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SPLITALGO")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HexStringSplit'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/hbasePreSplit.png#height=878&id=ZDNxr&originHeight=878&originWidth=1895&originalType=binary&ratio=1&status=done&style=none&width=1895",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"region-合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#region-合并"}},[s._v("#")]),s._v(" region 合并")]),s._v(" "),e("ul",[e("li",[s._v("Region的合并不是为了性能,  而是出于维护的目的 .")]),s._v(" "),e("li",[s._v("比如删除了大量的数据 ,这个时候每个Region都变得很小 ,存储多个Region就浪费了 ,这个时候可以把Region合并起来，进而可以减少一些Region服务器节点")]),s._v(" "),e("li",[s._v("通过Merge类冷合并Region\n"),e("ul",[e("li",[s._v("执行合并前，需要先关闭hbase集群")]),s._v(" "),e("li",[s._v("创建一张hbase表：")])])])]),s._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[s._v("create "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'info1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SPLITS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3000'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("查看表region")])]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/testRegion.png#height=398&id=EBbT3&originHeight=398&originWidth=1887&originalType=binary&ratio=1&status=done&style=none&width=1887",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("需求：")]),s._v(" "),e("li",[s._v("这里通过org.apache.hadoop.hbase.util.Merge类来实现，不需要进入hbase shell，直接执行（"),e("strong",[s._v("需要先关闭hbase集群")]),s._v("）：")])]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要把test表中的2个region数据进行合并：test,,1565940912661.62d28d7d20f18debd2e7dac093bc09d8.  test,1000,1565940912661.5b6f9e8dad3880bcc825826d12e81436.")]),s._v("\n  \n  hbase org.apache.hadoop.hbase.util.Merge "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" test,,1565940912661.62d28d7d20f18debd2e7dac093bc09d8. test,1000,1565940912661.5b6f9e8dad3880bcc825826d12e81436.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("成功后界面观察")])]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/testMerge.png#height=323&id=JaqSo&originHeight=323&originWidth=1895&originalType=binary&ratio=1&status=done&style=none&width=1895",alt:""}})]),s._v(" "),e("ul",[e("li",[s._v("通过online_merge热合并Region\n"),e("ul",[e("li",[s._v("不需要关闭hbase集群，在线进行合并")]),s._v(" "),e("li",[s._v("与冷合并不同的是，online_merge的传参是Region的hash值，而Region的hash值就是Region名称的最后那段在两个.之间的字符串部分。")]),s._v(" "),e("li",[s._v("需求：需要把test表中的2个region数据进行合并：\ntest,2000,1565940912661.c2212a3956b814a6f0d57a90983a8515.\ntest,3000,1565940912661.553dd4db667814cf2f050561167ca030.")]),s._v(" "),e("li",[s._v("需要进入hbase shell：")])])])]),s._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[s._v("merge_region "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c2212a3956b814a6f0d57a90983a8515'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'553dd4db667814cf2f050561167ca030'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("成功后观察界面")])]),s._v(" "),e("p",[e("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/04/01/uPic/hbase/assets/online_merge.png#height=247&id=DQlAo&originHeight=247&originWidth=1893&originalType=binary&ratio=1&status=done&style=none&width=1893",alt:""}})])])}),[],!1,null,null,null);t.default=n.exports}}]);