(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{517:function(s,a,n){"use strict";n.r(a);var t=n(19),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-函数式编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数式编程"}},[s._v("#")]),s._v(" 1. 函数式编程")]),s._v(" "),n("ul",[n("li",[s._v("我们将来使用Spark/Flink的大量业务代码都会使用到函数式编程。")]),s._v(" "),n("li",[s._v("下面的这些操作是学习的重点，先来感受下如何进行函数式编程以及它的强大")])]),s._v(" "),n("h3",{attrs:{id:"_1-遍历-foreach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-遍历-foreach"}},[s._v("#")]),s._v(" 1 遍历 - foreach")]),s._v(" "),n("ul",[n("li",[s._v("方法描述")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("foreach(f: (A) ⇒ Unit): Unit\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| foreach                    | API           | 说明             |\n| -------------------------- | ------------- | ---------------- |\n| 参数                       | f: (A) ⇒ Unit | 接收一个函数对象 |\n| 函数的输入参数为集合的元素 |               |                  |\n| 返回值为空                 |               |                  |\n| 返回值                     | Unit          | 空               |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("scala> val list=List(1,2,3,4)\nlist: List[Int] = List(1, 2, 3, 4)\n\n//定义一个匿名函数传入到foreach方法中\nscala> list.foreach((x:Int)=>println(x))\n1\n2\n3\n4\n\n//匿名函数的输入参数类型可以省略，由编译器自动推断\nscala> list.foreach(x=>println(x))\n1\n2\n3\n4\n\n//当函数参数，只在函数体中出现一次，而且函数体没有嵌套调用时，可以使用下划线来简化函数定 义\nscala> list.foreach(println(_))\n1\n2\n3\n4\n\n//最简写，直接给定println\nscala> list.foreach(println)\n1\n2\n3\n4\n\n//很神奇的语法，别害怕，盘它就可以了，后期通过scala语言开发spark、Flink程序非常简洁方便\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h3",{attrs:{id:"_2-映射-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-映射-map"}},[s._v("#")]),s._v(" 2 映射 - map")]),s._v(" "),n("ul",[n("li",[s._v("集合的映射操作是将来在编写Spark/Flink用得最多的操作，是我们必须要掌握的掌握。")]),s._v(" "),n("li",[s._v("方法描述")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def map[B](f: (A) ⇒ B): TraversableOnce[B]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| map方法                                 | API                | 说明                          |\n| --------------------------------------- | ------------------ | ----------------------------- |\n| 泛型                                    | [B]                | 指定map方法最终返回的集合泛型 |\n| 参数                                    | f: (A) ⇒ B         | 传入一个函数对象              |\n| 该函数接收一个类型A（要转换的列表元素） |                    |                               |\n| 返回值为类型B                           |                    |                               |\n| 返回值                                  | TraversableOnce[B] | B类型的集合                   |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个list集合，实现把内部每一个元素做乘以10，生成一个新的list集合\nscala> val list=List(1,2,3,4)\nlist: List[Int] = List(1, 2, 3, 4)\n\n//定义一个匿名函数\nscala> list.map((x:Int)=>x*10)\nres21: List[Int] = List(10, 20, 30, 40)\n\n//省略匿名函数参数类型\nscala> list.map(x=>x*10)\nres22: List[Int] = List(10, 20, 30, 40)\n\n//最简写   用下划线\nscala> list.map(_*10)\nres23: List[Int] = List(10, 20, 30, 40)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"_3-扁平化映射-flatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-扁平化映射-flatmap"}},[s._v("#")]),s._v(" 3 扁平化映射 - flatmap")]),s._v(" "),n("ul",[n("li",[s._v("映射扁平化也是将来用得非常多的操作，也是必须要掌握的。")]),s._v(" "),n("li",[s._v("方法描述")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def flatMap[B](f: (A) ⇒ GenTraversableOnce[B]): TraversableOnce[B]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| flatmap方法            | API                            | 说明                     |\n| ---------------------- | ------------------------------ | ------------------------ |\n| 泛型                   | [B]                            | 最终要转换的集合元素类型 |\n| 参数                   | f: (A) ⇒ GenTraversableOnce[B] | 传入一个函数对象         |\n| 函数的参数是集合的元素 |                                |                          |\n| 函数的返回值是一个集合 |                                |                          |\n| 返回值                 | TraversableOnce[B]             | B类型的集合              |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//定义一个List集合,每一个元素中就是一行数据，有很多个单词\nscala>  val list = List("hadoop hive spark flink", "hbase spark")\nlist: List[String] = List(hadoop hive spark flink, hbase spark)\n\n//使用flatMap进行偏平化处理，获取得到所有的单词\nscala> list.flatMap(x => x.split(" "))\nres24: List[String] = List(hadoop, hive, spark, flink, hbase, spark)\n\n//简写\nscala> list.flatMap(_.split(" "))\nres25: List[String] = List(hadoop, hive, spark, flink, hbase, spark)\n\n// flatMap该方法其本质是先进行了map 然后又调用了flatten\nscala> list.map(_.split(" ")).flatten\nres26: List[String] = List(hadoop, hive, spark, flink, hbase, spark)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"_4-过滤-filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-过滤-filter"}},[s._v("#")]),s._v(" 4 过滤 - filter")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("过滤符合一定条件的元素")])]),s._v(" "),n("li",[n("p",[s._v("方法描述")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def filter(p: (A) ⇒ Boolean): TraversableOnce[A]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| filter方法                                      | API                | 说明             |\n| ----------------------------------------------- | ------------------ | ---------------- |\n| 参数                                            | p: (A) ⇒ Boolean   | 传入一个函数对象 |\n| 接收一个集合类型的参数                          |                    |                  |\n| 返回布尔类型，满足条件返回true, 不满足返回false |                    |                  |\n| 返回值                                          | TraversableOnce[A] | 列表             |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个list集合\nscala> val list=List(1,2,3,4,5,6,7,8,9,10)\nlist: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n//过滤出集合中大于5的元素\nscala> list.filter(x => x >5)\nres27: List[Int] = List(6, 7, 8, 9, 10)\n\n//把集合中大于5的元素取出来乘以10生成一个新的list集合\nscala> list.filter(_ > 5).map(_ * 10)\nres29: List[Int] = List(60, 70, 80, 90, 100)\n\n\n//通过这个案例，应该是可以感受到scala比java的强大了...\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_5-排序-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-排序-sort"}},[s._v("#")]),s._v(" 5 排序 - sort")]),s._v(" "),n("ul",[n("li",[s._v("在scala集合中，可以使用以下几种方式来进行排序\n"),n("ul",[n("li",[s._v("sorted默认排序")]),s._v(" "),n("li",[s._v("sortBy指定字段排序")]),s._v(" "),n("li",[s._v("sortWith自定义排序")])])]),s._v(" "),n("li",[s._v("sorted默认排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个List集合\nscala> val list=List(5,1,2,4,3)\nlist: List[Int] = List(5, 1, 2, 4, 3)\n\n//默认就是升序\nscala> list.sorted\nres30: List[Int] = List(1, 2, 3, 4, 5)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("sortBy指定字段排序\n"),n("ul",[n("li",[s._v("根据传入的函数转换后，再进行排序")]),s._v(" "),n("li",[s._v("方法描述")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def sortBy[B](f: (A) ⇒ B): List[A]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| sortBy方法                 | API        | 说明                   |\n| -------------------------- | ---------- | ---------------------- |\n| 泛型                       | [B]        | 按照什么类型来进行排序 |\n| 参数                       | f: (A) ⇒ B | 传入函数对象           |\n| 接收一个集合类型的元素参数 |            |                        |\n| 返回B类型的元素进行排序    |            |                        |\n| 返回值                     | List[A]    | 返回排序后的列表       |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//定义一个List集合\nscala> val list=List("1 hadoop","2 spark","3 flink")\nlist: List[String] = List(1 hadoop, 2 spark, 3 flink)\n\n//按照单词的首字母进行排序\nscala> list.sortBy(x=>x.split(" ")(1))\nres33: List[String] = List(3 flink, 1 hadoop, 2 spark)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("sortWith自定义排序\n"),n("ul",[n("li",[s._v("自定义排序，根据一个函数来进行自定义排序")]),s._v(" "),n("li",[s._v("方法描述")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def sortWith(lt: (A, A) ⇒ Boolean): List[A]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| sortWith方法                                  | API                  | 说明                       |\n| --------------------------------------------- | -------------------- | -------------------------- |\n| 参数                                          | lt: (A, A) ⇒ Boolean | 传入一个比较大小的函数对象 |\n| 接收两个集合类型的元素参数                    |                      |                            |\n| 返回两个元素大小，小于返回true，大于返回false |                      |                            |\n| 返回值                                        | List[A]              | 返回排序后的列表           |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("scala> val list = List(2,3,1,6,4,5)\na: List[Int] = List(2, 3, 1, 6, 4, 5)\n\n//降序\nscala> list.sortWith((x,y)=>x>y)\nres35: List[Int] = List(6, 5, 4, 3, 2, 1)\n\n//升序\nscala> list.sortWith((x,y)=>x<y)\nres36: List[Int] = List(1, 2, 3, 4, 5, 6)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("16.6 分组 - groupBy")])]),s._v(" "),n("li",[n("p",[s._v("我们如果要将数据按照分组来进行统计分析，就需要使用到分组方法")])]),s._v(" "),n("li",[n("p",[s._v("groupBy表示按照函数将列表分成不同的组")])]),s._v(" "),n("li",[n("p",[s._v("方法描述")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def groupBy[K](f: (A) ⇒ K): Map[K, List[A]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| groupBy方法                                                  | API             | 说明                                                        |\n| ------------------------------------------------------------ | --------------- | ----------------------------------------------------------- |\n| 泛型                                                         | [K]             | 分组字段的类型                                              |\n| 参数                                                         | f: (A) ⇒ K      | 传入一个函数对象                                            |\n| 接收集合元素类型的参数                                       |                 |                                                             |\n| 返回一个K类型的key，这个key会用来进行分组，相同的key放在一组中 |                 |                                                             |\n| 返回值                                                       | Map[K, List[A]] | 返回一个映射，K为分组字段，List为这个分组字段对应的一组数据 |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('scala> val a = List("张三"->"男", "李四"->"女", "王五"->"男")\na: List[(String, String)] = List((张三,男), (李四,女), (王五,男))\n\n// 按照性别分组\nscala> a.groupBy(_._2)\nres0: scala.collection.immutable.Map[String,List[(String, String)]] = Map(男 -> List((张三,男), (王五,男)),\n女 -> List((李四,女)))\n\n// 将分组后的映射转换为性别/人数元组列表\nscala> res0.map(x => x._1 -> x._2.size)\nres3: scala.collection.immutable.Map[String,Int] = Map(男 -> 2, 女 -> 1)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_7-聚合-reduce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-聚合-reduce"}},[s._v("#")]),s._v(" 7 聚合 - reduce")]),s._v(" "),n("ul",[n("li",[s._v("reduce表示将列表，传入一个函数进行聚合计算")]),s._v(" "),n("li",[s._v("方法描述")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def reduce[A1 >: A](op: (A1, A1) ⇒ A1): A1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| reduce方法                               | API               | 说明                               |\n| ---------------------------------------- | ----------------- | ---------------------------------- |\n| 泛型                                     | [A1 >: A]         | （下界）A1必须是集合元素类型的子类 |\n| 参数                                     | op: (A1, A1) ⇒ A1 | 传入函数对象，用来不断进行聚合操作 |\n| 第一个A1类型参数为：当前聚合后的变量     |                   |                                    |\n| 第二个A1类型参数为：当前要进行聚合的元素 |                   |                                    |\n| 返回值                                   | A1                | 列表最终聚合为一个元素             |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("scala> val a = List(1,2,3,4,5,6,7,8,9,10)\na: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nscala> a.reduce((x,y) => x + y)\nres5: Int = 55\n\n// 第一个下划线表示第一个参数，就是历史的聚合数据结果\n// 第二个下划线表示第二个参数，就是当前要聚合的数据元素\nscala> a.reduce(_ + _)\nres53: Int = 55\n\n// 与reduce一样，从左往右计算\nscala> a.reduceLeft(_ + _)\nres0: Int = 55\n\n// 从右往左聚合计算\nscala> a.reduceRight(_ + _)\nres1: Int = 55\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"_8-折叠-fold"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-折叠-fold"}},[s._v("#")]),s._v(" 8 折叠 - fold")]),s._v(" "),n("ul",[n("li",[s._v("fold与reduce很像，但是多了一个指定初始值参数")]),s._v(" "),n("li",[s._v("方法描述")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def fold[A1 >: A](z: A1)(op: (A1, A1) ⇒ A1): A1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("方法说明\n| reduce方法                               | API               | 说明                               |\n| ---------------------------------------- | ----------------- | ---------------------------------- |\n| 泛型                                     | [A1 >: A]         | （下界）A1必须是集合元素类型的子类 |\n| 参数1                                    | z: A1             | 初始值                             |\n| 参数2                                    | op: (A1, A1) ⇒ A1 | 传入函数对象，用来不断进行折叠操作 |\n| 第一个A1类型参数为：当前折叠后的变量     |                   |                                    |\n| 第二个A1类型参数为：当前要进行折叠的元素 |                   |                                    |\n| 返回值                                   | A1                | 列表最终折叠为一个元素             |")])]),s._v(" "),n("li",[n("p",[s._v("方法实操")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个List集合\nscala> val a = List(1,2,3,4,5,6,7,8,9,10)\na: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n//求和\nscala> a.sum\nres41: Int = 55\n\n//给定一个初始值，，折叠求和\nscala> a.fold(0)(_+_)\nres42: Int = 55\n\nscala> a.fold(10)(_+_)\nres43: Int = 65\n\n//从左往右\nscala> a.foldLeft(10)(_+_)\nres44: Int = 65\n\n//从右往左\nscala> a.foldRight(10)(_+_)\nres45: Int = 65\n\n\n//fold和foldLet效果一致，表示从左往右计算\n//foldRight表示从右往左计算\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"_2-高阶函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-高阶函数"}},[s._v("#")]),s._v(" 2. 高阶函数")]),s._v(" "),n("ul",[n("li",[s._v("使用函数值作为参数，或者返回值为函数值的“函数”和“方法”，均称之为“高阶函数”。")])]),s._v(" "),n("h3",{attrs:{id:"_1-函数值作为参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数值作为参数"}},[s._v("#")]),s._v(" 1 函数值作为参数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个数组\nscala> val array=Array(1,2,3,4,5)\narray: Array[Int] = Array(1, 2, 3, 4, 5)\n\n//定义一个函数\nscala> val func=(x:Int)=>x*10\nfunc: Int => Int = <function1>\n\n//函数作为参数传递到方法中\nscala> array.map(func)\nres0: Array[Int] = Array(10, 20, 30, 40, 50)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_2-匿名函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-匿名函数"}},[s._v("#")]),s._v(" 2 匿名函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//定义一个数组\nscala> val array=Array(1,2,3,4,5)\narray: Array[Int] = Array(1, 2, 3, 4, 5)\n\n//定义一个没有名称的函数----匿名函数\nscala> array.map(x=>x*10)\nres1: Array[Int] = Array(10, 20, 30, 40, 50)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_3-柯里化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-柯里化"}},[s._v("#")]),s._v(" 3 柯里化")]),s._v(" "),n("ul",[n("li",[s._v("方法可以定义多个参数列表，当使用较少的参数列表调用多参数列表的方法时，会产生一个新的函数，该函数接收剩余的参数列表作为其参数。这被称为柯里化。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('def getAddress(a:String):(String,String)=>String={\n    (b:String,c:String)=>a+"-"+b+"-"+c\n}\n\nscala> val f1=getAddress("china")\nf1: (String, String) => String = <function2>\n\nscala> f1("beijing","tiananmen")\nres5: String = china-beijing-tiananmen\n\n\n\n//这里就可以这样去定义方法\ndef getAddress(a:String)(b:String,c:String):String={ \n  \t\ta+"-"+b+"-"+c \n}\n//调用\nscala> getAddress("china")("beijing","tiananmen")\nres0: String = china-beijing-tiananmen\n\n//之前学习使用的下面这些操作就是使用到了柯里化\nList(1,2,3,4).fold(0)(_+_)\nList(1,2,3,4).foldLeft(0)(_+_)\nList(1,2,3,4).foldRight(0)(_+_)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"_4-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-闭包"}},[s._v("#")]),s._v(" 4 闭包")]),s._v(" "),n("ul",[n("li",[s._v("函数里面引用外面类成员变量叫作闭包")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var factor=10\n\nval f1=(x:Int) => x*factor\n\n\n//定义的函数f1，它的返回值是依赖于不在函数作用域的一个变量\n//后期必须要要获取到这个变量才能执行\n//spark和flink程序的开发中大量的使用到函数，函数的返回值依赖的变量可能都需要进行大量的网络传输获取得到。这里就需要这些变量实现序列化进行网络传输。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);