(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{551:function(n,s,a){"use strict";a.r(s);var e=a(19),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"_1-需求背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求背景"}},[n._v("#")]),n._v(" 1 需求背景")]),n._v(" "),a("p",[n._v("需求描述：每隔5秒，计算最近10秒单词出现的次数。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231628795.png",alt:"Window"}})]),n._v(" "),a("h3",{attrs:{id:"_1-1-timewindow实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-timewindow实现"}},[n._v("#")]),n._v(" 1.1  TimeWindow实现")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource<String> dataStream = env.socketTextStream("localhost", 8888);\n        SingleOutputStreamOperator<Tuple2<String, Integer>> result = dataStream.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {\n            @Override\n            public void flatMap(String line, Collector<Tuple2<String, Integer>> out) throws Exception {\n                String[] fields = line.split(",");\n                for (String word : fields) {\n                    out.collect(new Tuple2<>(word, 1));\n                }\n            }\n        }).keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .sum(1);\n\n        result.print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("h3",{attrs:{id:"_1-2-processwindowfunction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-processwindowfunction"}},[n._v("#")]),n._v(" 1.2  ProcessWindowFunction")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource<String> dataStream = env.socketTextStream("hadoop1", 8888);\n        SingleOutputStreamOperator<Tuple2<String, Integer>> result = dataStream.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {\n            @Override\n            public void flatMap(String line, Collector<Tuple2<String, Integer>> out) throws Exception {\n                String[] fields = line.split(",");\n                for (String word : fields) {\n                    out.collect(new Tuple2<>(word, 1));\n                }\n            }\n        }).keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .process(new SumProcessWindowFunction());\n\n        result.print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple,TimeWindow> {\n        FastDateFormat dataFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Integer>> elements,\n                            Collector<Tuple2<String, Integer>> out) {\n\n            System.out.println("当天系统的时间："+dataFormat.format(System.currentTimeMillis()));\n\n            System.out.println("Window的处理时间："+dataFormat.format(context.currentProcessingTime()));\n            System.out.println("Window的开始时间："+dataFormat.format(context.window().getStart()));\n            System.out.println("Window的结束时间："+dataFormat.format(context.window().getEnd()));\n\n            int sum = 0;\n            for (Tuple2<String, Integer> ele : elements) {\n                sum += 1;\n            }\n            // 输出单词出现的次数\n            out.collect(Tuple2.of(tuple.getField(0), sum));\n\n        }\n    }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br")])]),a("p",[n._v("先输入：")]),n._v(" "),a("p",[n._v("hive")]),n._v(" "),a("p",[n._v("然后输入hive,hbase")]),n._v(" "),a("p",[n._v("输出结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("当天系统的时间：15:10:30\nWindow的处理时间：15:10:30\nWindow的开始时间：15:10:20\nWindow的结束时间：15:10:30\n(hive,1)\n当天系统的时间：15:10:35\nWindow的处理时间：15:10:35\nWindow的开始时间：15:10:25\nWindow的结束时间：15:10:35\n当天系统的时间：15:10:35\nWindow的处理时间：15:10:35\nWindow的开始时间：15:10:25\nWindow的结束时间：15:10:35\n(hbase,1)\n(hive,1)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("p",[n._v("根据每隔5秒执行最近10秒的数据，Flink划分的窗口")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("[00:00:00, 00:00:05) [00:00:05, 00:00:10)\n[00:00:10, 00:00:15) [00:00:15, 00:00:20) \n[00:00:20, 00:00:25) [00:00:25, 00:00:30)\n[00:00:30, 00:00:35) [00:00:35, 00:00:40)\n[00:00:40, 00:00:45) [00:00:45, 00:00:50) \n[00:00:50, 00:00:55) [00:00:55, 00:01:00)\n[00:01:00, 00:01:05)  ...\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("h3",{attrs:{id:"_1-3-time的种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-time的种类"}},[n._v("#")]),n._v(" 1.3  Time的种类")]),n._v(" "),a("p",[n._v("针对stream数据中的时间，可以分为以下三种：")]),n._v(" "),a("ul",[a("li",[n._v("Event Time：事件产生的时间，它通常由事件中的时间戳描述。")]),n._v(" "),a("li",[n._v("Ingestion time：事件进入Flink的时间")]),n._v(" "),a("li",[n._v("Processing Time：事件被处理时当前系统的时间")])]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231644404.png",alt:"1569394563906"}})]),n._v(" "),a("p",[n._v("案例演示：\n原始日志如下")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("2019-11-11 10:00:01,134 INFO executor.Executor: Finished task in state 0.0\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("这条数据进入Flink的时间是2019-11-11 20:00:00,102\n到达window处理的时间为2019-11-11 20:00:01,100")]),n._v(" "),a("p",[n._v("2019-11-11 10:00:01,134 是Event time\n2019-11-11 20:00:00,102 是Ingestion time\n2019-11-11 20:00:01,100 是Processing time")]),n._v(" "),a("p",[n._v("思考：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("如果我们想要统计每分钟内接口调用失败的错误日志个数，使用哪个时间才有意义？\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("h2",{attrs:{id:"_2-process-time-window-有序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-process-time-window-有序"}},[n._v("#")]),n._v(" 2  Process Time Window（有序）")]),n._v(" "),a("p",[n._v("需求：每隔5秒计算最近10秒的单词出现的次数")]),n._v(" "),a("p",[n._v("自定义source，模拟：第 13 秒的时候连续发送 2 个事件，第 16 秒的时候再发送 1 个事件")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231644884.png",alt:"自定义source-TimeWindow"}})]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        DataStreamSource<String> dataStream = env.addSource(new TestSouce());\n        SingleOutputStreamOperator<Tuple2<String, Integer>> result = dataStream.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {\n            @Override\n            public void flatMap(String line, Collector<Tuple2<String, Integer>> out) throws Exception {\n                String[] fields = line.split(",");\n                for (String word : fields) {\n                    out.collect(new Tuple2<>(word, 1));\n                }\n            }\n        }).keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .process(new SumProcessWindowFunction());\n\n        result.print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n    public static class TestSouce implements SourceFunction<String>{\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        @Override\n        public void run(SourceContext<String> ctx) throws Exception {\n             // 控制大约在 10 秒的倍数的时间点发送事件\n            String currTime = String.valueOf(System.currentTimeMillis());\n            while (Integer.valueOf(currTime.substring(currTime.length() - 4)) > 100) {\n                currTime = String.valueOf(System.currentTimeMillis());\n                continue;\n            }\n            System.out.println("开始发送事件的时间：" + dateFormat.format(System.currentTimeMillis()));\n            // 第 13 秒发送两个事件\n            TimeUnit.SECONDS.sleep(13);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 产生了一个事件，但是由于网络原因，事件没有发送\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 第 16 秒发送一个事件\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            TimeUnit.SECONDS.sleep(300);\n\n        }\n\n        @Override\n        public void cancel() {\n\n        }\n    }\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Integer>> elements,\n                            Collector<Tuple2<String, Integer>> out) {\n\n//            System.out.println("当天系统的时间："+dateFormat.format(System.currentTimeMillis()));\n//\n//            System.out.println("Window的处理时间："+dateFormat.format(context.currentProcessingTime()));\n//            System.out.println("Window的开始时间："+dateFormat.format(context.window().getStart()));\n//            System.out.println("Window的结束时间："+dateFormat.format(context.window().getEnd()));\n\n            int sum = 0;\n            for (Tuple2<String, Integer> ele : elements) {\n                sum += 1;\n            }\n            // 输出单词出现的次数\n            out.collect(Tuple2.of(tuple.getField(0), sum));\n\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br")])]),a("p",[n._v("输出结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("开始发送事件的时间：16:16:40\n(hadoop,2)\n(hadoop,3)\n(hadoop,1)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231626599.png",alt:"自定义source-TimeWindow2"}})]),n._v(" "),a("h2",{attrs:{id:"_3-process-time-window-无序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-process-time-window-无序"}},[n._v("#")]),n._v(" 3  Process Time Window（无序）")]),n._v(" "),a("p",[n._v("自定义source，模拟：第 13 秒的时候连续发送 2 个事件，但是有一个事件确实在第13秒的发送出去了，另外一个事件因为某种原因在19秒的时候才发送出去，第 16 秒的时候再发送 1 个事件")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        DataStreamSource<String> dataStream = env.addSource(new TestSouce());\n        SingleOutputStreamOperator<Tuple2<String, Integer>> result = dataStream.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {\n            @Override\n            public void flatMap(String line, Collector<Tuple2<String, Integer>> out) throws Exception {\n                String[] fields = line.split(",");\n                for (String word : fields) {\n                    out.collect(new Tuple2<>(word, 1));\n                }\n            }\n        }).keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .process(new SumProcessWindowFunction());\n\n        result.print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n    /**\n     * 模拟：第 13 秒的时候连续发送 2 个事件，第 16 秒的时候再发送 1 个事件\n     */\n    public static class TestSouce implements SourceFunction<String>{\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        @Override\n        public void run(SourceContext<String> ctx) throws Exception {\n            // 控制大约在 10 秒的倍数的时间点发送事件\n            String currTime = String.valueOf(System.currentTimeMillis());\n            while (Integer.valueOf(currTime.substring(currTime.length() - 4)) > 100) {\n                currTime = String.valueOf(System.currentTimeMillis());\n                continue;\n            }\n            System.out.println("开始发送事件的时间：" + dateFormat.format(System.currentTimeMillis()));\n            // 第 13 秒发送两个事件\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 产生了一个事件，但是由于网络原因，事件没有发送\n            String event = "hadoop," + System.currentTimeMillis();\n            // 第 16 秒发送一个事件\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 第 19 秒的时候发送\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect(event);\n\n            TimeUnit.SECONDS.sleep(300);\n\n        }\n\n        @Override\n        public void cancel() {\n\n        }\n    }\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Integer>> elements,\n                            Collector<Tuple2<String, Integer>> out) {\n\n//            System.out.println("当天系统的时间："+dateFormat.format(System.currentTimeMillis()));\n//\n//            System.out.println("Window的处理时间："+dateFormat.format(context.currentProcessingTime()));\n//            System.out.println("Window的开始时间："+dateFormat.format(context.window().getStart()));\n//            System.out.println("Window的结束时间："+dateFormat.format(context.window().getEnd()));\n\n            int sum = 0;\n            for (Tuple2<String, Integer> ele : elements) {\n                sum += 1;\n            }\n            // 输出单词出现的次数\n            out.collect(Tuple2.of(tuple.getField(0), sum));\n\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br")])]),a("p",[n._v("处理结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("开始发送事件的时间：16:18:50\n(hadoop,1)\n(1573287543001,1)\n(1573287543001,1)\n(hadoop,3)\n(1573287546016,1)\n(1573287543016,1)\n(1573287546016,1)\n(hadoop,2)\n(1573287543016,1)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231645029.png",alt:"自定义source-TimeWindow-无序"}})]),n._v(" "),a("h2",{attrs:{id:"_4-使用event-time处理无序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用event-time处理无序"}},[n._v("#")]),n._v(" 4  使用Event Time处理无序")]),n._v(" "),a("p",[n._v("使用Event Time处理")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        //步骤一：设置时间类型\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        DataStreamSource<String> dataStream = env.addSource(new TestSouce());\n       dataStream.map(new MapFunction<String, Tuple2<String,Long>>() {\n            @Override\n            public Tuple2<String, Long> map(String line) throws Exception {\n                String[] fields = line.split(",");\n                return new Tuple2<>(fields[0],Long.valueOf(fields[1]));\n            }\n            //步骤二：获取数据里面的event Time\n        }).assignTimestampsAndWatermarks(new EventTimeExtractor() )\n               .keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .process(new SumProcessWindowFunction())\n                .print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n    public static class TestSouce implements SourceFunction<String>{\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        @Override\n        public void run(SourceContext<String> ctx) throws Exception {\n            // 控制大约在 10 秒的倍数的时间点发送事件\n            String currTime = String.valueOf(System.currentTimeMillis());\n            while (Integer.valueOf(currTime.substring(currTime.length() - 4)) > 100) {\n                currTime = String.valueOf(System.currentTimeMillis());\n                continue;\n            }\n            System.out.println("开始发送事件的时间：" + dateFormat.format(System.currentTimeMillis()));\n            // 第 13 秒发送两个事件\n            TimeUnit.SECONDS.sleep(13);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 产生了一个事件，但是由于网络原因，事件没有发送\n            String event = "hadoop," + System.currentTimeMillis();\n            // 第 16 秒发送一个事件\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 第 19 秒的时候发送\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect(event);\n\n            TimeUnit.SECONDS.sleep(300);\n\n        }\n\n        @Override\n        public void cancel() {\n\n        }\n    }\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Long>,Tuple2<String,Integer>,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Long>> elements,\n                            Collector<Tuple2<String, Integer>> out) {\n\n//            System.out.println("当天系统的时间："+dateFormat.format(System.currentTimeMillis()));\n//\n//            System.out.println("Window的处理时间："+dateFormat.format(context.currentProcessingTime()));\n//            System.out.println("Window的开始时间："+dateFormat.format(context.window().getStart()));\n//            System.out.println("Window的结束时间："+dateFormat.format(context.window().getEnd()));\n\n            int sum = 0;\n            for (Tuple2<String, Long> ele : elements) {\n                sum += 1;\n            }\n            // 输出单词出现的次数\n            out.collect(Tuple2.of(tuple.getField(0), sum));\n\n        }\n    }\n\n\n    private static class EventTimeExtractor\n            implements AssignerWithPeriodicWatermarks<Tuple2<String, Long>> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n\n        // 拿到每一个事件的 Event Time\n        @Override\n        public long extractTimestamp(Tuple2<String, Long> element,\n                                     long previousElementTimestamp) {\n            return element.f1;\n        }\n\n        @Nullable\n        @Override\n        public Watermark getCurrentWatermark() {\n\n            return new Watermark(System.currentTimeMillis());\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br")])]),a("p",[n._v("计算结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("开始发送事件的时间：16:44:10\n(hadoop,1)\n(hadoop,3)\n(hadoop,1)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646615.png",alt:"用EventTime处理无序的数据"}})]),n._v(" "),a("p",[n._v("现在我们第三个window的结果已经计算准确了，但是我们还是没有彻底的解决问题。接下来就需要我们使用WaterMark机制来解决了。")]),n._v(" "),a("h2",{attrs:{id:"_5-使用watermark机制解决无序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用watermark机制解决无序"}},[n._v("#")]),n._v(" 5  使用WaterMark机制解决无序")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646994.png",alt:"使用waterMark机制处理无序的数据"}})]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 每隔5秒计算最近10秒单词出现的次数\n */\npublic class TimeWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        //步骤一：设置时间类型\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        DataStreamSource<String> dataStream = env.addSource(new TestSouce());\n       dataStream.map(new MapFunction<String, Tuple2<String,Long>>() {\n            @Override\n            public Tuple2<String, Long> map(String line) throws Exception {\n                String[] fields = line.split(",");\n                return new Tuple2<>(fields[0],Long.valueOf(fields[1]));\n            }\n            //步骤二：获取数据里面的event Time\n        }).assignTimestampsAndWatermarks(new EventTimeExtractor() )\n               .keyBy(0)\n                .timeWindow(Time.seconds(10), Time.seconds(5))\n                .process(new SumProcessWindowFunction())\n                .print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n    public static class TestSouce implements SourceFunction<String>{\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        @Override\n        public void run(SourceContext<String> ctx) throws Exception {\n            // 控制大约在 10 秒的倍数的时间点发送事件\n            String currTime = String.valueOf(System.currentTimeMillis());\n            while (Integer.valueOf(currTime.substring(currTime.length() - 4)) > 100) {\n                currTime = String.valueOf(System.currentTimeMillis());\n                continue;\n            }\n            System.out.println("开始发送事件的时间：" + dateFormat.format(System.currentTimeMillis()));\n            // 第 13 秒发送两个事件\n            TimeUnit.SECONDS.sleep(13);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 产生了一个事件，但是由于网络原因，事件没有发送\n            String event = "hadoop," + System.currentTimeMillis();\n            // 第 16 秒发送一个事件\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect("hadoop," + System.currentTimeMillis());\n            // 第 19 秒的时候发送\n            TimeUnit.SECONDS.sleep(3);\n            ctx.collect(event);\n\n            TimeUnit.SECONDS.sleep(300);\n\n        }\n\n        @Override\n        public void cancel() {\n\n        }\n    }\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Long>,Tuple2<String,Integer>,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Long>> elements,\n                            Collector<Tuple2<String, Integer>> out) {\n\n//            System.out.println("当天系统的时间："+dateFormat.format(System.currentTimeMillis()));\n//\n//            System.out.println("Window的处理时间："+dateFormat.format(context.currentProcessingTime()));\n//            System.out.println("Window的开始时间："+dateFormat.format(context.window().getStart()));\n//            System.out.println("Window的结束时间："+dateFormat.format(context.window().getEnd()));\n\n            int sum = 0;\n            for (Tuple2<String, Long> ele : elements) {\n                sum += 1;\n            }\n            // 输出单词出现的次数\n            out.collect(Tuple2.of(tuple.getField(0), sum));\n\n        }\n    }\n\n\n    private static class EventTimeExtractor\n            implements AssignerWithPeriodicWatermarks<Tuple2<String, Long>> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n\n        // 拿到每一个事件的 Event Time\n        @Override\n        public long extractTimestamp(Tuple2<String, Long> element,\n                                     long previousElementTimestamp) {\n            return element.f1;\n        }\n\n        @Nullable\n        @Override\n        public Watermark getCurrentWatermark() {\n            //window延迟5秒触发\n            return new Watermark(System.currentTimeMillis() - 5000);\n        }\n    }\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br")])]),a("p",[n._v("计算结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("开始发送事件的时间：16:57:40\n(hadoop,2)\n(hadoop,3)\n(hadoop,1)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("结果正确！")]),n._v(" "),a("h2",{attrs:{id:"_6-watermark机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-watermark机制"}},[n._v("#")]),n._v(" 6  WaterMark机制")]),n._v(" "),a("h3",{attrs:{id:"_6-2-watermark的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-watermark的定义"}},[n._v("#")]),n._v(" 6.2  WaterMark的定义")]),n._v(" "),a("p",[n._v("使用eventTime的时候如何处理乱序数据？\n我们知道，流处理从事件产生，到流经source，再到operator，中间是有一个过程和时间的。虽然大部分情况下，流到operator的数据都是按照事件产生的时间顺序来的，但是也不排除由于网络延迟等原因，导致乱序的产生，特别是使用kafka的话，多个分区的数据无法保证有序。所以在进行window计算的时候，我们又不能无限期的等下去，必须要有个机制来保证一个特定的时间后，必须触发window去进行计算了。这个特别的机制，就是watermark，watermark是用于处理乱序事件的。watermark可以翻译为水位线")]),n._v(" "),a("p",[n._v("有序的流的watermarks")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646844.png",alt:"1569479960665"}})]),n._v(" "),a("p",[n._v("无序的流的watermarks")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646485.png",alt:"1569479997521"}})]),n._v(" "),a("p",[n._v("多并行度流的watermarks")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646674.png",alt:"1569480051217"}})]),n._v(" "),a("h3",{attrs:{id:"_6-3-需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-需求"}},[n._v("#")]),n._v(" 6.3 需求")]),n._v(" "),a("p",[n._v("得到并打印每隔 3 秒钟统计前 3 秒内的相同的 key 的所有的事件")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646450.png",alt:"1573294611566"}})]),n._v(" "),a("p",[n._v("代码开发")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 得到并打印每隔 3 秒钟统计前 3 秒内的相同的 key 的所有的事件\n \n   3秒统计一卡。 单词计数\n */\npublic class WaterMarkWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        //步骤一：设置时间类型\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        //设置waterMark产生的周期为1s\n        env.getConfig().setAutoWatermarkInterval(1000);\n\n        DataStreamSource<String> dataStream = env.socketTextStream("hadoop1", 8888);\n        dataStream.map(new MapFunction<String, Tuple2<String,Long>>() {\n            @Override\n            public Tuple2<String, Long> map(String line) throws Exception {\n                String[] fields = line.split(",");\n                return new Tuple2<>(fields[0],Long.valueOf(fields[1]));\n            }\n            //步骤二：获取数据里面的event Time\n        }).assignTimestampsAndWatermarks(new EventTimeExtractor() )\n               .keyBy(0)\n                .timeWindow(Time.seconds(3))\n                .process(new SumProcessWindowFunction())\n                .print().setParallelism(1);\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Long>,String,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Long>> elements,\n                            Collector<String> out) {\n            System.out.println("处理时间：" + dateFormat.format(context.currentProcessingTime()));\n            System.out.println("window start time : " + dateFormat.format(context.window().getStart()));\n\n            List<String> list = new ArrayList<>();\n            for (Tuple2<String, Long> ele : elements) {\n                list.add(ele.toString() + "|" + dateFormat.format(ele.f1));\n            }\n            out.collect(list.toString());\n            System.out.println("window end time  : " + dateFormat.format(context.window().getEnd()));\n\n        }\n    }\n\n\n    private static class EventTimeExtractor\n            implements AssignerWithPeriodicWatermarks<Tuple2<String, Long>> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n\n        private long currentMaxEventTime = 0L;\n        private long maxOutOfOrderness = 10000; // 最大允许的乱序时间 10 秒\n\n\n        // 拿到每一个事件的 Event Time\n        @Override\n        public long extractTimestamp(Tuple2<String, Long> element,\n                                     long previousElementTimestamp) {\n            long currentElementEventTime = element.f1;\n            currentMaxEventTime = Math.max(currentMaxEventTime, currentElementEventTime);\n            System.out.println("event = " + element\n                    + "|" + dateFormat.format(element.f1) // Event Time\n                    + "|" + dateFormat.format(currentMaxEventTime)  // Max Event Time\n                    + "|" + dateFormat.format(getCurrentWatermark().getTimestamp())); // Current Watermark\n            return currentElementEventTime;\n        }\n\n        @Nullable\n        @Override\n        public Watermark getCurrentWatermark() {\n            /**\n             * WasterMark会周期性的产生，默认就是每隔200毫秒产生一个\n             *\n             *         设置 watermark 产生的周期为 1000ms\n             *         env.getConfig().setAutoWatermarkInterval(1000);\n             */\n            //window延迟5秒触发\n            System.out.println("water mark...");\n            return new Watermark(currentMaxEventTime - maxOutOfOrderness);\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br")])]),a("p",[n._v("演示数据：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("-- window 计算触发的条件\n000001,1461756862000\n000001,1461756866000\n000001,1461756872000\n000001,1461756873000\n000001,1461756874000\n000001,1461756876000\n000001,1461756877000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("p",[n._v("一条一条的数据输入。")]),n._v(" "),a("h3",{attrs:{id:"_6-4计算window的触发时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4计算window的触发时间"}},[n._v("#")]),n._v(" 6.4计算window的触发时间")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646908.png",alt:"1573295426278"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646235.png",alt:"1573295434967"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646823.png",alt:"1573295444736"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646755.png",alt:"1573295452688"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646842.png",alt:"1573295462557"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646467.png",alt:"1573295482248"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646362.png",alt:"1573295499134"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231646158.png",alt:"1573295512707"}})]),n._v(" "),a("p",[n._v("总结：window触发的时间")]),n._v(" "),a("ol",[a("li",[n._v("watermark 时间 >= window_end_time")]),n._v(" "),a("li",[n._v("在 [window_start_time, window_end_time) 区间中有数据存在，注意是左闭右开的区间，而且是以 event time 来计算的")])]),n._v(" "),a("h3",{attrs:{id:"_6-5-watermark-window-处理乱序时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-watermark-window-处理乱序时间"}},[n._v("#")]),n._v(" 6.5 WaterMark+Window 处理乱序时间")]),n._v(" "),a("p",[n._v("输入数据：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("000001,1461756879000\n000001,1461756871000\n\n000001,1461756883000\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231626052.png",alt:"1573296359405"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647508.png",alt:"1573296391460"}})]),n._v(" "),a("h3",{attrs:{id:"_6-6-迟到太多的事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-迟到太多的事件"}},[n._v("#")]),n._v(" 6.6 迟到太多的事件")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647843.png",alt:"1573296532906"}})]),n._v(" "),a("ol",[a("li",[n._v("丢弃，这个是默认的处理方式")]),n._v(" "),a("li",[n._v("allowedLateness 指定允许数据延迟的时间")]),n._v(" "),a("li",[n._v("sideOutputLateData 收集迟到的数据")])]),n._v(" "),a("h4",{attrs:{id:"_6-6-1-丢弃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-1-丢弃"}},[n._v("#")]),n._v(" 6.6.1 丢弃")]),n._v(" "),a("p",[n._v("重启程序，做测试。")]),n._v(" "),a("p",[n._v("输入数据：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("000001,1461756870000\n000001,1461756883000\n\n000001,1461756870000\n000001,1461756871000\n000001,1461756872000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647413.png",alt:"1573296944424"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647140.png",alt:"1573296954680"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647107.png",alt:"1573296963406"}})]),n._v(" "),a("p",[n._v("发现迟到太多数据就会被丢弃")]),n._v(" "),a("h4",{attrs:{id:"_6-6-2-指定允许再次迟到的时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-2-指定允许再次迟到的时间"}},[n._v("#")]),n._v(" 6.6.2 指定允许再次迟到的时间")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(").assignTimestampsAndWatermarks(new EventTimeExtractor() )\n               .keyBy(0)\n                .timeWindow(Time.seconds(3))\n                .allowedLateness(Time.seconds(2)) // 允许事件迟到 2 秒\n                .process(new SumProcessWindowFunction())\n                .print().setParallelism(1);\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("p",[n._v("输入数据")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("000001,1461756870000\n000001,1461756883000\n\n000001,1461756870000\n000001,1461756871000\n000001,1461756872000\n\n000001,1461756884000\n\n000001,1461756870000\n000001,1461756871000\n000001,1461756872000\n\n000001,1461756885000\n\n000001,1461756870000\n000001,1461756871000\n000001,1461756872000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231626153.png",alt:"1573297641179"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647764.png",alt:"1573297653341"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231626163.png",alt:"1573297664487"}})]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647059.png",alt:"1573297613203"}})]),n._v(" "),a("ol",[a("li",[n._v("当我们设置允许迟到 2 秒的事件，第一次 window 触发的条件是 watermark >= window_end_time")]),n._v(" "),a("li",[n._v("第二次(或者多次)触发的条件是 watermark < window_end_time + allowedLateness")])]),n._v(" "),a("h4",{attrs:{id:"_6-6-3-收集迟到的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-3-收集迟到的数据"}},[n._v("#")]),n._v(" 6.6.3 收集迟到的数据")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 得到并打印每隔 3 秒钟统计前 3 秒内的相同的 key 的所有的事件\n * 收集迟到太多的数据\n */\npublic class WaterMarkWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(1);\n        //步骤一：设置时间类型\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        //设置waterMark产生的周期为1s\n        env.getConfig().setAutoWatermarkInterval(1000);\n\n        // 保存迟到的，会被丢弃的数据\n        OutputTag<Tuple2<String, Long>> outputTag =\n                new OutputTag<Tuple2<String, Long>>("late-date"){};\n\n        DataStreamSource<String> dataStream = env.socketTextStream("hadoop1", 8888);\n        SingleOutputStreamOperator<String> result = dataStream.map(new MapFunction<String, Tuple2<String, Long>>() {\n            @Override\n            public Tuple2<String, Long> map(String line) throws Exception {\n                String[] fields = line.split(",");\n                return new Tuple2<>(fields[0], Long.valueOf(fields[1]));\n            }\n            //步骤二：获取数据里面的event Time\n        }).assignTimestampsAndWatermarks(new EventTimeExtractor())\n                .keyBy(0)\n                .timeWindow(Time.seconds(3))\n                // .allowedLateness(Time.seconds(2)) // 允许事件迟到 2 秒\n                .sideOutputLateData(outputTag) // 保存迟到太多的数据\n                .process(new SumProcessWindowFunction());\n        //打印正常的数据\n        result.print();\n        //获取迟到太多的数据\n\n        DataStream<String> lateDataStream\n                = result.getSideOutput(outputTag).map(new MapFunction<Tuple2<String, Long>, String>() {\n            @Override\n            public String map(Tuple2<String, Long> stringLongTuple2) throws Exception {\n                return "迟到的数据：" + stringLongTuple2.toString();\n            }\n        });\n\n        lateDataStream.print();\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Long>,String,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Long>> elements,\n                            Collector<String> out) {\n            System.out.println("处理时间：" + dateFormat.format(context.currentProcessingTime()));\n            System.out.println("window start time : " + dateFormat.format(context.window().getStart()));\n\n            List<String> list = new ArrayList<>();\n            for (Tuple2<String, Long> ele : elements) {\n                list.add(ele.toString() + "|" + dateFormat.format(ele.f1));\n            }\n            out.collect(list.toString());\n            System.out.println("window end time  : " + dateFormat.format(context.window().getEnd()));\n\n        }\n    }\n\n\n    private static class EventTimeExtractor\n            implements AssignerWithPeriodicWatermarks<Tuple2<String, Long>> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n\n        private long currentMaxEventTime = 0L;\n        private long maxOutOfOrderness = 10000; // 最大允许的乱序时间 10 秒\n\n\n        // 拿到每一个事件的 Event Time\n        @Override\n        public long extractTimestamp(Tuple2<String, Long> element,\n                                     long previousElementTimestamp) {\n            long currentElementEventTime = element.f1;\n            currentMaxEventTime = Math.max(currentMaxEventTime, currentElementEventTime);\n            System.out.println("event = " + element\n                    + "|" + dateFormat.format(element.f1) // Event Time\n                    + "|" + dateFormat.format(currentMaxEventTime)  // Max Event Time\n                    + "|" + dateFormat.format(getCurrentWatermark().getTimestamp())); // Current Watermark\n            return currentElementEventTime;\n        }\n\n        @Nullable\n        @Override\n        public Watermark getCurrentWatermark() {\n            /**\n             * WasterMark会周期性的产生，默认就是每隔200毫秒产生一个\n             *\n             *         设置 watermark 产生的周期为 1000ms\n             *         env.getConfig().setAutoWatermarkInterval(1000);\n             */\n            System.out.println("water mark...");\n            return new Watermark(currentMaxEventTime - maxOutOfOrderness);\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br")])]),a("p",[n._v("输入：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("000001,1461756870000\n000001,1461756883000\n迟到的数据\n000001,1461756870000\n000001,1461756871000\n000001,1461756872000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h2",{attrs:{id:"_7-多并行度下的watermark"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-多并行度下的watermark"}},[n._v("#")]),n._v(" 7 多并行度下的WaterMark")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/202111231647484.png",alt:"1573298799383"}})]),n._v(" "),a("p",[n._v("一个window可能会接受到多个waterMark，我们以最小的为准。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 得到并打印每隔 3 秒钟统计前 3 秒内的相同的 key 的所有的事件\n * 测试多并行度\n */\npublic class WaterMarkWindowWordCount {\n    public static void main(String[] args) throws Exception{\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        //把并行度设置为2\n        env.setParallelism(2);\n        //步骤一：设置时间类型\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        //设置waterMark产生的周期为1s\n        env.getConfig().setAutoWatermarkInterval(1000);\n\n        // 保存迟到的，会被丢弃的数据\n        OutputTag<Tuple2<String, Long>> outputTag =\n                new OutputTag<Tuple2<String, Long>>("late-date"){};\n\n        DataStreamSource<String> dataStream = env.socketTextStream("hadoop1", 8888);\n        SingleOutputStreamOperator<String> result = dataStream.map(new MapFunction<String, Tuple2<String, Long>>() {\n            @Override\n            public Tuple2<String, Long> map(String line) throws Exception {\n                String[] fields = line.split(",");\n                return new Tuple2<>(fields[0], Long.valueOf(fields[1]));\n            }\n            //步骤二：获取数据里面的event Time\n        }).assignTimestampsAndWatermarks(new EventTimeExtractor())\n                .keyBy(0)\n                .timeWindow(Time.seconds(3))\n                // .allowedLateness(Time.seconds(2)) // 允许事件迟到 2 秒\n                .sideOutputLateData(outputTag) // 保存迟到太多的数据\n                .process(new SumProcessWindowFunction());\n        //打印正常的数据\n        result.print();\n        //获取迟到太多的数据\n\n        DataStream<String> lateDataStream\n                = result.getSideOutput(outputTag).map(new MapFunction<Tuple2<String, Long>, String>() {\n            @Override\n            public String map(Tuple2<String, Long> stringLongTuple2) throws Exception {\n                return "迟到的数据：" + stringLongTuple2.toString();\n            }\n        });\n\n        lateDataStream.print();\n\n        env.execute("TimeWindowWordCount");\n\n    }\n\n\n\n\n    /**\n     * IN, OUT, KEY, W\n     * IN：输入的数据类型\n     * OUT：输出的数据类型\n     * Key：key的数据类型（在Flink里面，String用Tuple表示）\n     * W：Window的数据类型\n     */\n    public static class SumProcessWindowFunction extends\n            ProcessWindowFunction<Tuple2<String,Long>,String,Tuple,TimeWindow> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n        /**\n         * 当一个window触发计算的时候会调用这个方法\n         * @param tuple key\n         * @param context operator的上下文\n         * @param elements 指定window的所有元素\n         * @param out 用户输出\n         */\n        @Override\n        public void process(Tuple tuple, Context context, Iterable<Tuple2<String, Long>> elements,\n                            Collector<String> out) {\n            System.out.println("处理时间：" + dateFormat.format(context.currentProcessingTime()));\n            System.out.println("window start time : " + dateFormat.format(context.window().getStart()));\n\n            List<String> list = new ArrayList<>();\n            for (Tuple2<String, Long> ele : elements) {\n                list.add(ele.toString() + "|" + dateFormat.format(ele.f1));\n            }\n            out.collect(list.toString());\n            System.out.println("window end time  : " + dateFormat.format(context.window().getEnd()));\n\n        }\n    }\n\n\n    private static class EventTimeExtractor\n            implements AssignerWithPeriodicWatermarks<Tuple2<String, Long>> {\n        FastDateFormat dateFormat = FastDateFormat.getInstance("HH:mm:ss");\n\n        private long currentMaxEventTime = 0L;\n        private long maxOutOfOrderness = 10000; // 最大允许的乱序时间 10 秒\n\n\n        // 拿到每一个事件的 Event Time\n        @Override\n        public long extractTimestamp(Tuple2<String, Long> element,\n                                     long previousElementTimestamp) {\n            long currentElementEventTime = element.f1;\n            currentMaxEventTime = Math.max(currentMaxEventTime, currentElementEventTime);\n            //打印线程\n            long id = Thread.currentThread().getId();\n            System.out.println("当前线程ID："+id+"event = " + element\n                    + "|" + dateFormat.format(element.f1) // Event Time\n                    + "|" + dateFormat.format(currentMaxEventTime)  // Max Event Time\n                    + "|" + dateFormat.format(getCurrentWatermark().getTimestamp())); // Current Watermark\n            return currentElementEventTime;\n        }\n\n        @Nullable\n        @Override\n        public Watermark getCurrentWatermark() {\n            /**\n             * WasterMark会周期性的产生，默认就是每隔200毫秒产生一个\n             *\n             *         设置 watermark 产生的周期为 1000ms\n             *         env.getConfig().setAutoWatermarkInterval(1000);\n             */\n            System.out.println("water mark...");\n            return new Watermark(currentMaxEventTime - maxOutOfOrderness);\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br"),a("span",{staticClass:"line-number"},[n._v("119")]),a("br"),a("span",{staticClass:"line-number"},[n._v("120")]),a("br"),a("span",{staticClass:"line-number"},[n._v("121")]),a("br"),a("span",{staticClass:"line-number"},[n._v("122")]),a("br"),a("span",{staticClass:"line-number"},[n._v("123")]),a("br"),a("span",{staticClass:"line-number"},[n._v("124")]),a("br")])]),a("p",[n._v("输入数据：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("000001,1461756870000\n000001,1461756883000\n000001,1461756888000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("输出结果：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("当前线程ID：55event = (000001,1461756883000)|19:34:43|19:34:43|19:34:33\n  \n  \n当前线程ID：56event = (000001,1461756870000)|19:34:30|19:34:30|19:34:20\n当前线程ID：56event = (000001,1461756888000)|19:34:48|19:34:48|19:34:38\n  \n\n处理时间：19:31:25\nwindow start time : 19:34:30\n2> [(000001,1461756870000)|19:34:30]\nwindow end time  : 19:34:33\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("ID为56的线程有两个WaterMark：20,38")]),n._v(" "),a("p",[n._v("那么38这个会替代20，所以ID为56的线程的WaterMark是38")]),n._v(" "),a("p",[n._v("然后ID为55的线程的WaterMark是33，而ID为56是WaterMark是38，会在里面求一个小的值作为waterMark，就是33，这个时候会触发Window为30-33的窗口，那这个窗口里面就有 (000001,1461756870000)这条数据。")])])}),[],!1,null,null,null);s.default=t.exports}}]);