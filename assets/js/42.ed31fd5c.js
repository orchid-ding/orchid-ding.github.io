(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{528:function(a,s,t){"use strict";t.r(s);var e=t(19),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("先来熟悉两个关于地理单词的用法")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("longitude：经度，范围值。经度0°——180°（东行,标注E）0°——180°（西行,标注W）\nlatitude：维度 0°——90°N、0°——90°S\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("通过经纬度可以用来干什么：可以通过经纬度推断出地址，可以通过地址推断出经纬度，而且可以通过经纬度进行电子地图划分\n"),t("a",{attrs:{href:"http://www.gpsspg.com/maps.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.gpsspg.com/maps.htm"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"_1、-虚拟车站的介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-虚拟车站的介绍"}},[a._v("#")]),a._v(" 1、 虚拟车站的介绍")]),a._v(" "),t("p",[a._v("有这样一则打车小段子：当司机询问乘客上车地点时，乘客回答说，“你看到天上那朵云了么？就是长得像兔子的那朵，我就在它下面。”出租车司机抬起头，望着满天白云，无语、泪目。")]),a._v(" "),t("p",[a._v("以前打车时，让车找到人，让人发现车，看似简单的事情，却并不容易实现。为了保证准确地相遇，双方可能要电话聊上好久。但是，自从滴滴“小绿点”横空出世以来，最合适上车点/停车点被在地图上直观的标示出，让司机与乘客每一次遇见都一目了然。")]),a._v(" "),t("p",[t("a",{attrs:{href:"http://zhidx.com/p/104947.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://zhidx.com/p/104947.html"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"http://mini.eastday.com/mobile/171205140559851.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://mini.eastday.com/mobile/171205140559851.html"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("什么是虚拟车站，简单来说就是你和司机约定一个公共的显眼的地点，你们都去这个地点碰面，那么问题来了，如何最科学的选择这个公共的地点成为了一个难题。")]),a._v(" "),t("h2",{attrs:{id:"_2、什么是小绿点-虚拟车站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是小绿点-虚拟车站"}},[a._v("#")]),a._v(" 2、什么是小绿点(虚拟车站)")]),a._v(" "),t("p",[a._v("这里所说的拨云见日的“小绿点”，其实是滴滴为打车乘客的推荐的智能上车地点，是一个“虚拟车站”和生活中的公交车站不同，单作用是相同的，为了在固定的区域位置提示用户方便乘车。因为在滴滴产品页面呈现是一个个绿色的小点，所以被亲切的称呼为“小绿点”。\n滴滴出行发现，乘客上车前类似“到在云彩下面来接我”的电话沟通，会浪费了司机与乘客大量的时间。为了根治此症，彻底消除可怕的云山雾罩般的找寻，“小绿点”便应运而生了。\n如下图:叫车前，滴滴App界面会出现推荐的智能上车点")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387088-86fc4813-60dc-43c8-afc8-e27c8760478e.jpeg",alt:""}}),a._v("\n目前，当用户通过滴滴出行的App叫车前，系统便会为用户自动推荐以其当前位置为中心的几个“最佳上车点”，用户选择其中一个地点后发布订单，即由系统指示司机在该处驻车等候乘客，而无需双方再打电话进行繁碎的位置描述等沟通流程，整个出行过程也会更加从容。")]),a._v(" "),t("h2",{attrs:{id:"_3、小绿点背后的大数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、小绿点背后的大数据"}},[a._v("#")]),a._v(" 3、小绿点背后的大数据")]),a._v(" "),t("p",[a._v("大家可能不知道，每个绿色的圆点，都是经过大量数据计算出来的上车位置。这种自动推荐的背后，是结合了司机是否方便停车、用户上车习惯等多种数据计算生成的。\n       据滴滴统计,早在2015年，滴滴出行就开始尝试上线这样的“虚拟车站”，通过数据挖掘用户习惯，渐渐挖掘出来全国超过3000万个小绿点，并且附加了地图导引的功能。有了“小绿点”外加指路虚线，便可以把“路盲”级乘客引导到适合上车的点，司机也有同样的指引，只要双方都奔着“小绿点”，很快就可以见面。")]),a._v(" "),t("h2",{attrs:{id:"_4、小绿点的价值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、小绿点的价值"}},[a._v("#")]),a._v(" 4、小绿点的价值")]),a._v(" "),t("p",[a._v("可不要小看这个不起眼的“小绿点”，要实现“无通话叫车”全靠它。滴滴数据显示，仅2017年一年，“小绿点”就节省司乘通话超过21亿次,如果按照每次一分钟的通话时间计算的话，一分钟1毛钱，21亿大概能节省2100w人民币\n总结:省时，省钱，提高沟通效率\n"),t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387262-40c159eb-7c48-4709-8249-f9d2252f25fb.jpeg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"_5、虚拟车站实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、虚拟车站实现思路"}},[a._v("#")]),a._v(" 5、虚拟车站实现思路")]),a._v(" "),t("p",[a._v("在我们了解了功能后，接下来就需要思考:")]),a._v(" "),t("p",[a._v("1.虚拟车站如何实现？最终要在界面上显示的车站位置重要的信息就是经纬度，而我们拿到的订单数据中包含核心数据(订单ID，起始经纬度)。")]),a._v(" "),t("p",[a._v("2.可以把乘客经常上车的位置作为虚拟车站，比如一个十字路口，上车的人比较多(也就是起点经纬度在十字路口比较集中，比如在十字路口乘车订单数在10个以上，或者20个以上时)，那我们就可以在这个十字路口设置一个虚拟车站位置。按照这样的思路是可以实现功能的，但会有个问题是如何统计哪些位置的起点经纬度比较集中并且数量达到一个基数(业务中判定一个地点作为虚拟车站的条件)。")]),a._v(" "),t("p",[a._v("3.对于起点比较集中的位置我们可以把地图划分为无数相等的格子，比如划分成大正方形(长X宽都是10米范围内，并且这个范围内的起点表多，那么我们就可以在这个格子中设置一个虚拟车站，可以取格子中经度和维度最小或者最大的点作为虚拟车站最后在界面上显示)，这是geohash的做法")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387477-bd1bb815-0ea1-480c-a0f1-b600d05dcb9e.png",alt:""}})]),a._v(" "),t("p",[a._v("但是geohash一类的矩形算法，有以下两个显著的缺陷:")]),a._v(" "),t("p",[a._v("1、在不同纬度的地区会出现地理单元单位面积差异较大的情况。")]),a._v(" "),t("p",[a._v("2、在常用的地理范围查询中，基于矩形的查询方法，存在8邻域到中心网格的距离不相等的问题。")]),a._v(" "),t("p",[a._v("3.针对以上第二点，我们可以使用uber公司开源的h3算法可以解决我们的业务问题.")]),a._v(" "),t("h2",{attrs:{id:"_6、uber-h3算法介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、uber-h3算法介绍"}},[a._v("#")]),a._v(" 6、uber h3算法介绍")]),a._v(" "),t("p",[t("a",{attrs:{href:"http://www.sohu.com/a/294377304_326074",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.sohu.com/a/294377304_326074"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://uber.github.io/h3/#/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://uber.github.io/h3/#/"),t("OutboundLink")],1),a._v(" "),t("a",{attrs:{href:"https://www.jianshu.com/p/e42d903dce38",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.jianshu.com/p/e42d903dce38"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387602-9bfae19e-259c-4cf1-8dff-40522ee577af.png",alt:""}}),a._v("\nH3,是一个六边形分层索引网格系统，也是最近几年实现数据聚合的主要趋势，在h3出现之前大部分情况采用的是geohash算法，墨卡托投影，还有一些其他投影技术，比如google s2.地理索引")]),a._v(" "),t("p",[a._v("六边形网格与周围网格的距离有且仅有一个，而四边形存在两类距离，三角形有三类距离：\n"),t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387747-13d46043-e666-4dc4-b6ea-362bf7d14025.png",alt:""}}),a._v("\n六边形的周围邻居到中心网格的距离却是相等的，从形状上来说更加接近于圆形。而且六边形也是边数最多的无缝多边形。")]),a._v(" "),t("p",[a._v("所以，基于hexagon的地理单元已经成为各大厂家的首选，比如 Uber 和 Didi 的峰时定价服务，这也就是我们为什么要使用uber h3的原因.")]),a._v(" "),t("h3",{attrs:{id:"_1、h3的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、h3的特点"}},[a._v("#")]),a._v(" 1、H3的特点")]),a._v(" "),t("h4",{attrs:{id:"_1-将数据划分为六边形网格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-将数据划分为六边形网格"}},[a._v("#")]),a._v(" 1.将数据划分为六边形网格")]),a._v(" "),t("p",[a._v("H3有一个简单的API，可将坐标索引到六角形的全局网格中。")]),a._v(" "),t("h4",{attrs:{id:"_2-分层网格系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-分层网格系统"}},[a._v("#")]),a._v(" 2.分层网格系统")]),a._v(" "),t("p",[a._v("容易按位截断粗略的近似单元，以及区域压缩/解压缩算法。")]),a._v(" "),t("h4",{attrs:{id:"_3-全面全球化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-全面全球化"}},[a._v("#")]),a._v(" 3.全面全球化")]),a._v(" "),t("p",[a._v("连同十二个五边形，整个世界都可以在H3中寻址，分辨率可达平方米。\n"),t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619387936-5df45313-5434-4623-ac44-359d4ed9f49b.png",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"_2、分辨率介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、分辨率介绍"}},[a._v("#")]),a._v(" 2、分辨率介绍")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619388104-2f68741d-6550-47f2-9a17-bb2822887e3b.jpeg",alt:""}})]),a._v(" "),t("p",[a._v("示例demo，创建的6变形的边长大约9米.")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619388236-26a9f91a-1fe0-424d-8f4e-fe855275f6c5.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"_7、如何实现虚拟车站的统计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、如何实现虚拟车站的统计"}},[a._v("#")]),a._v(" 7、如何实现虚拟车站的统计")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619388476-98c6f402-8b91-48df-a469-5df342463b40.png",alt:""}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619388662-b035a8c4-4eb9-4d13-8fe1-78624eb9294c.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"_8、实现虚拟车站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、实现虚拟车站"}},[a._v("#")]),a._v(" 8、实现虚拟车站")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package com.travel.programApp\n\nimport com.travel.common.{Constants, District}\nimport com.travel.utils.{HbaseTools, SparkUtils}\nimport org.apache.hadoop.conf.Configuration\nimport org.apache.hadoop.hbase.HBaseConfiguration\nimport org.apache.spark.SparkConf\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.{DataFrame, Row, SparkSession}\nimport org.locationtech.jts.geom.{Point, Polygon}\nimport org.locationtech.jts.io.WKTReader\n\nimport scala.collection.mutable\n\nobject SparkSQLVirtualStation {\n\n  def main(args: Array[String]): Unit = {\n    val conf = new SparkConf\n    conf.set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")\n    conf.setMaster("local[1]").setAppName("sparkHbase")\n    \n    val sparkSession: SparkSession = SparkSession.builder().config(conf).getOrCreate()\n    _//设置日志级别，避免出现太多日志信息_\n    sparkSession.sparkContext.setLogLevel("WARN")\n    \n    _//hbase配置_\n    val hconf: Configuration = HBaseConfiguration.create()\n    hconf.set("hbase.zookeeper.quorum", "node01,node02,node03")\n    hconf.set("hbase.zookeeper.property.clientPort", "2181")\n    hconf.setInt("hbase.client.operation.timeout", 3000)\n    val hbaseFrame: DataFrame = HbaseTools.loadHBaseData(sparkSession,hconf)\n    _//将dataFrame注册成为一张表_\n    hbaseFrame.createOrReplaceTempView("order_df")\n    _//获取虚拟车站，每个虚拟车站里面所有的经纬度坐标点只取一个最小的_\n    val virtual_rdd: RDD[Row] = SparkUtils.getVirtualFrame(sparkSession)\n    _//广播每个区域的经纬度边界_\n    val districtsBroadcastVar: Broadcast[java.util.ArrayList[District]] = SparkUtils.broadCastDistrictValue(sparkSession)\n    _//将每个区域的边界转换成为一个多边形，使用Polygon这个对象来表示，返回一个元组（每一个区域封装对象District，多边形Polygon）_\n    _//判断每个虚拟车站，是属于哪一个区里面的_\n    val finalSaveRow: RDD[mutable.Buffer[Row]] = virtual_rdd.mapPartitions(eachPartition => {\n      _//使用JTS-Tools来通过多个经纬度，画出多边形_\n      import org.geotools.geometry.jts.JTSFactoryFinder\n      val geometryFactory = JTSFactoryFinder.getGeometryFactory(null)\n      var reader = new WKTReader(geometryFactory)\n      _//将哪一个区的，哪一个边界求出来_\n      val wktPolygons: mutable.Buffer[(District, Polygon)] = SparkUtils.changeDistictToPolygon(districtsBroadcastVar, reader)\n      eachPartition.map(row => {\n        val lng = row.getAs[String]("starting_lng")\n        val lat = row.getAs[String]("starting_lat")\n        val wktPoint = "POINT(" + lng + " " + lat + ")";\n        val point: Point = reader.**read**(wktPoint).asInstanceOf[Point];\n\n        val rows: mutable.Buffer[Row] = wktPolygons.**map**(polygon => {\n          if (polygon._2.**contains**(point)) {\n            val fields = row.toSeq.toArray ++ **Seq**(polygon._1.getName)\n            Row.**fromSeq**(fields)\n          } else {\n            null\n          }\n        }).**filter**(null != _)\n        rows\n      })\n    })\n    _//将我们的数据压平，然后转换成为DF_\n    val rowRdd: RDD[Row] = finalSaveRow.**flatMap**(x =>x)\n    _//将数据保存到HBase里面去_\n    HbaseTools.**saveOrWriteData**(hconf,rowRdd,Constants.VIRTUAL_STATION)\n  }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br"),t("span",{staticClass:"line-number"},[a._v("38")]),t("br"),t("span",{staticClass:"line-number"},[a._v("39")]),t("br"),t("span",{staticClass:"line-number"},[a._v("40")]),t("br"),t("span",{staticClass:"line-number"},[a._v("41")]),t("br"),t("span",{staticClass:"line-number"},[a._v("42")]),t("br"),t("span",{staticClass:"line-number"},[a._v("43")]),t("br"),t("span",{staticClass:"line-number"},[a._v("44")]),t("br"),t("span",{staticClass:"line-number"},[a._v("45")]),t("br"),t("span",{staticClass:"line-number"},[a._v("46")]),t("br"),t("span",{staticClass:"line-number"},[a._v("47")]),t("br"),t("span",{staticClass:"line-number"},[a._v("48")]),t("br"),t("span",{staticClass:"line-number"},[a._v("49")]),t("br"),t("span",{staticClass:"line-number"},[a._v("50")]),t("br"),t("span",{staticClass:"line-number"},[a._v("51")]),t("br"),t("span",{staticClass:"line-number"},[a._v("52")]),t("br"),t("span",{staticClass:"line-number"},[a._v("53")]),t("br"),t("span",{staticClass:"line-number"},[a._v("54")]),t("br"),t("span",{staticClass:"line-number"},[a._v("55")]),t("br"),t("span",{staticClass:"line-number"},[a._v("56")]),t("br"),t("span",{staticClass:"line-number"},[a._v("57")]),t("br"),t("span",{staticClass:"line-number"},[a._v("58")]),t("br"),t("span",{staticClass:"line-number"},[a._v("59")]),t("br"),t("span",{staticClass:"line-number"},[a._v("60")]),t("br"),t("span",{staticClass:"line-number"},[a._v("61")]),t("br"),t("span",{staticClass:"line-number"},[a._v("62")]),t("br"),t("span",{staticClass:"line-number"},[a._v("63")]),t("br"),t("span",{staticClass:"line-number"},[a._v("64")]),t("br"),t("span",{staticClass:"line-number"},[a._v("65")]),t("br"),t("span",{staticClass:"line-number"},[a._v("66")]),t("br"),t("span",{staticClass:"line-number"},[a._v("67")]),t("br"),t("span",{staticClass:"line-number"},[a._v("68")]),t("br"),t("span",{staticClass:"line-number"},[a._v("69")]),t("br"),t("span",{staticClass:"line-number"},[a._v("70")]),t("br")])]),t("h2",{attrs:{id:"_9、运行代码-查看hbase当中出现表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、运行代码-查看hbase当中出现表"}},[a._v("#")]),a._v(" 9、运行代码，查看hbase当中出现表")]),a._v(" "),t("p",[a._v("将虚拟车站的数据，都保存到了Hbase的VIRTUAL_STATIONS这个表当中去，然后将该表当中的数据通过phoenix来进行映射，使用javaWeb程序去查询phoenix当中的数据")]),a._v(" "),t("h2",{attrs:{id:"_10、phoenix映射hbase当中的表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、phoenix映射hbase当中的表"}},[a._v("#")]),a._v(" 10、phoenix映射Hbase当中的表")]),a._v(" "),t("p",[a._v("node02进入phoenix客户端，然后创建Hbase当中的表映射")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('cd /kfly/install/apache-phoenix-4.14.0-cdh5.14.2-bin/\nbin/sqlline.py node01:2181\n\ncreate view VIRTUAL_STATIONS(\n   "ROWKEY" varchar primary key , \n   "f1"."CITY_ID"  varchar,\n   "f1"."DISTRICT_NAME" varchar,\n  "f1"."STARTING_LNG" varchar,\n  "f1"."STARTING_LAT" varchar\n) as select * from VIRTUAL_STATIONS;\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("h2",{attrs:{id:"_11、浏览器页面访问虚拟车站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、浏览器页面访问虚拟车站"}},[a._v("#")]),a._v(" 11、浏览器页面访问虚拟车站")]),a._v(" "),t("p",[a._v("通过浏览器访问web界面，查看虚拟车站模块，即可看到页面当中每个区域的虚拟车展个数已经统计出来了")]),a._v(" "),t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])])])}),[],!1,null,null,null);s.default=r.exports}}]);