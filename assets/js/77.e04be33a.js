(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{561:function(a,e,r){"use strict";r.r(e);var n=r(19),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"yarn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[a._v("#")]),a._v(" YARN")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/a19a61bc-9378-3e38-944a-899a09f37908.jpg#height=359&id=Wh8b7&originHeight=359&originWidth=858&originalType=binary&ratio=1&status=done&style=none&width=858",alt:""}})]),a._v(" "),r("ul",[r("li",[a._v("Apache Hadoop YARN(Yet Another Resource Negotiator)是Hadoop的子项目，为分离Hadoop2.0资源管理和计算组件而引入")]),a._v(" "),r("li",[a._v("YRAN具有足够的通用性，可以支持其它的分布式计算模式")])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/99b59921-9a97-3199-8c39-d3b77dfdceaf.jpg#height=465&id=Ffast&originHeight=465&originWidth=1356&originalType=binary&ratio=1&status=done&style=none&width=1356",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"yarn架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn架构"}},[a._v("#")]),a._v(" YARN架构")]),a._v(" "),r("ul",[r("li",[a._v("类似HDFS，YARN也是经典的"),r("strong",[a._v("主从（master/slave）架构")]),a._v(" "),r("ul",[r("li",[a._v("YARN服务由一个ResourceManager（RM）和多个NodeManager（NM）构成")]),a._v(" "),r("li",[a._v("ResourceManager为主节点（master）")]),a._v(" "),r("li",[a._v("NodeManager为从节点（slave）")])])])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/Figure3Architecture-of-YARN.png#height=312&id=Hzxoc&originHeight=312&originWidth=657&originalType=binary&ratio=1&status=done&style=none&width=657",alt:""}})]),a._v(" "),r("ul",[r("li",[a._v("ApplicationMaster可以在容器内运行任何类型的任务。例如，MapReduce ApplicationMaster请求容器启动map或reduce任务，而Giraph ApplicationMaster请求容器运行Giraph任务。\n| 组件名 | 作用 |\n| --- | --- |\n| "),r("strong",[a._v("ApplicationManager")]),a._v(" | 相当于这个Application的监护人和管理者，负责监控、管理这个Application的所有Attempt在cluster中各个节点上的具体运行，同时负责向Yarn ResourceManager申请资源、返还资源等； |\n| "),r("strong",[a._v("NodeManager")]),a._v(" | 是Slave上一个独立运行的进程，负责上报节点的状态(磁盘，内存，cpu等使用信息)； |\n| "),r("strong",[a._v("Container")]),a._v(" | 是yarn中分配资源的一个单位，包涵内存、CPU等等资源，YARN以Container为单位分配资源； |")])]),a._v(" "),r("p",[a._v("ResourceManager 负责对各个 NodeManager 上资源进行统一管理和调度。当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的 ApplicationMaster，它负责向 ResourceManager 申请资源，并要求 NodeManger 启动可以占用一定资源的任务。由于不同的 ApplicationMaster 被分布到不同的节点上，因此它们之间不会相互影响。")]),a._v(" "),r("p",[a._v("Client 向 ResourceManager 提交的每一个应用程序都必须有一个 ApplicationMaster，它经过 ResourceManager 分配资源后，运行于某一个 Slave 节点的 Container 中，具体做事情的 Task，同样也运行与某一个 Slave 节点的 Container 中。")]),a._v(" "),r("h3",{attrs:{id:"resourcemanager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resourcemanager"}},[a._v("#")]),a._v(" "),r("strong",[a._v("ResourceManager")])]),a._v(" "),r("ul",[r("li",[a._v("RM是一个全局的资源管理器，集群只有一个\n"),r("ul",[r("li",[a._v("负责整个系统的资源管理和分配")]),a._v(" "),r("li",[a._v("包括处理客户端请求")]),a._v(" "),r("li",[a._v("启动/监控 ApplicationMaster")]),a._v(" "),r("li",[a._v("监控 NodeManager、资源的分配与调度")])])]),a._v(" "),r("li",[a._v("它主要由两个组件构成：\n"),r("ul",[r("li",[a._v("调度器（Scheduler）")]),a._v(" "),r("li",[a._v("应用程序管理器（Applications Manager，ASM）")])])]),a._v(" "),r("li",[a._v("调度器\n"),r("ul",[r("li",[a._v("调度器根据容量、队列等限制条件（如每个队列分配一定的资源，最多执行一定数量的作业等），将系统中的资源分配给各个正在运行的应用程序。")]),a._v(" "),r("li",[a._v("需要注意的是，该调度器是一个“纯调度器”\n"),r("ul",[r("li",[a._v("它不从事任何与具体应用程序相关的工作，比如不负责监控或者跟踪应用的执行状态等，也不负责重新启动因应用执行失败或者硬件故障而产生的失败任务，这些均交由应用程序相关的ApplicationMaster完成。")]),a._v(" "),r("li",[a._v("调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位用一个抽象概念“资源容器”（Resource Container，简称Container）表示，Container是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。")])])])])]),a._v(" "),r("li",[a._v("应用程序管理器\n"),r("ul",[r("li",[a._v("应用程序管理器主要负责管理整个系统中所有应用程序")]),a._v(" "),r("li",[a._v("接收job的提交请求")]),a._v(" "),r("li",[a._v("为应用分配第一个 Container 来运行 ApplicationMaster，包括应用程序提交、与调度器协商资源以启动 ApplicationMaster、监控 ApplicationMaster 运行状态并在失败时重新启动它等")])])])]),a._v(" "),r("h3",{attrs:{id:"nodemanager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nodemanager"}},[a._v("#")]),a._v(" "),r("strong",[a._v("NodeManager")])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/20190103113256851.png#height=445&id=mHI2Q&originHeight=445&originWidth=597&originalType=binary&ratio=1&status=done&style=none&width=597",alt:""}})]),a._v(" "),r("ul",[r("li",[a._v("NodeManager 是一个 slave 服务，整个集群有多个")]),a._v(" "),r("li",[a._v("NodeManager ：\n"),r("ul",[r("li",[a._v("它负责接收 ResourceManager 的资源分配请求，分配具体的 Container 给应用。")]),a._v(" "),r("li",[a._v("负责监控并报告 Container 使用信息给 ResourceManager。")])])]),a._v(" "),r("li",[a._v("功能：\n"),r("ul",[r("li",[a._v("NodeManager 本节点上的资源使用情况和各个 Container 的运行状态（cpu和内存等资源）")]),a._v(" "),r("li",[a._v("接收及处理来自 ResourceManager 的命令请求，分配 Container 给应用的某个任务；")]),a._v(" "),r("li",[a._v("定时地向RM汇报以确保整个集群平稳运行，RM 通过收集每个 NodeManager 的报告信息来追踪整个集群健康状态的，而 NodeManager 负责监控自身的健康状态；")]),a._v(" "),r("li",[a._v("处理来自 ApplicationMaster 的请求；")]),a._v(" "),r("li",[a._v("管理着所在节点每个 Container 的生命周期；")]),a._v(" "),r("li",[a._v("管理每个节点上的日志；")]),a._v(" "),r("li",[a._v("当一个节点启动时，它会向 ResourceManager 进行注册并告知 ResourceManager 自己有多少资源可用。")]),a._v(" "),r("li",[a._v("在运行期，通过 NodeManager 和 ResourceManager 协同工作，这些信息会不断被更新并保障整个集群发挥出最佳状态。")]),a._v(" "),r("li",[a._v("NodeManager 只负责管理自身的 Container，它并不知道运行在它上面应用的信息。负责管理应用信息的组件是 ApplicationMaster")])])])]),a._v(" "),r("h3",{attrs:{id:"container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[a._v("#")]),a._v(" Container")]),a._v(" "),r("ul",[r("li",[a._v("Container 是 YARN 中的资源抽象\n"),r("ul",[r("li",[a._v("它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等")]),a._v(" "),r("li",[a._v("当 AM 向 RM 申请资源时，RM 为 AM 返回的资源便是用 Container 表示的。")]),a._v(" "),r("li",[a._v("YARN 会为每个任务分配一个 Container，且该任务只能使用该 Container 中描述的资源。")])])]),a._v(" "),r("li",[a._v("Container 和集群NodeManager节点的关系是：\n"),r("ul",[r("li",[a._v("一个NodeManager节点可运行多个 Container")]),a._v(" "),r("li",[a._v("但一个 Container 不会跨节点。")]),a._v(" "),r("li",[a._v("任何一个 job 或 application 必须运行在一个或多个 Container 中")]),a._v(" "),r("li",[a._v("在 Yarn 框架中，ResourceManager 只负责告诉 ApplicationMaster 哪些 Containers 可以用")]),a._v(" "),r("li",[a._v("ApplicationMaster 还需要去找 NodeManager 请求分配具体的 Container。")])])]),a._v(" "),r("li",[a._v("需要注意的是\n"),r("ul",[r("li",[a._v("Container 是一个动态资源划分单位，是根据应用程序的需求动态生成的")]),a._v(" "),r("li",[a._v("目前为止，YARN 仅支持 CPU 和内存两种资源，且使用了轻量级资源隔离机制 Cgroups 进行资源隔离。")])])]),a._v(" "),r("li",[a._v("功能：\n"),r("ul",[r("li",[a._v("对task环境的抽象；")]),a._v(" "),r("li",[a._v("描述一系列信息；")]),a._v(" "),r("li",[a._v("任务运行资源的集合（cpu、内存、io等）；")]),a._v(" "),r("li",[a._v("任务运行环境")])])])]),a._v(" "),r("h3",{attrs:{id:"applicationmaster"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#applicationmaster"}},[a._v("#")]),a._v(" "),r("strong",[a._v("ApplicationMaster")])]),a._v(" "),r("ul",[r("li",[a._v("功能：\n"),r("ul",[r("li",[a._v("数据切分；")]),a._v(" "),r("li",[a._v("为应用程序申请资源并进一步分配给内部任务（TASK）；")]),a._v(" "),r("li",[a._v("任务监控与容错；")]),a._v(" "),r("li",[a._v("负责协调来自ResourceManager的资源，并通过NodeManager监视容器的执行和资源使用情况。")])])]),a._v(" "),r("li",[a._v("ApplicationMaster 与 ResourceManager 之间的通信\n"),r("ul",[r("li",[a._v("是整个 Yarn 应用从提交到运行的最核心部分，是 Yarn 对整个集群进行动态资源管理的根本步骤")]),a._v(" "),r("li",[a._v("Yarn 的动态性，就是来源于多个Application 的 ApplicationMaster 动态地和 ResourceManager 进行沟通，不断地申请、释放、再申请、再释放资源的过程。")])])])]),a._v(" "),r("h3",{attrs:{id:"resource-request"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resource-request"}},[a._v("#")]),a._v(" Resource Request")]),a._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/f50e85bdb9ce",target:"_blank",rel:"noopener noreferrer"}},[a._v("引用连接"),r("OutboundLink")],1)]),a._v(" "),r("ul",[r("li",[a._v("Yarn的设计目标\n"),r("ul",[r("li",[a._v("允许我们的各种应用以共享、安全、多租户的形式使用整个集群。")]),a._v(" "),r("li",[a._v("并且，为了保证集群资源调度和数据访问的高效性，Yarn还必须能够感知整个集群拓扑结构。")])])]),a._v(" "),r("li",[a._v("为了实现这些目标，ResourceManager的调度器Scheduler为应用程序的资源请求定义了一些灵活的协议，"),r("strong",[a._v("Resource Request")]),a._v("和"),r("strong",[a._v("Container")]),a._v("。\n"),r("ul",[r("li",[a._v("一个应用先向ApplicationMaster发送一个满足自己需求的资源请求")]),a._v(" "),r("li",[a._v("然后ApplicationMaster把这个资源请求以resource-request的形式发送给ResourceManager的Scheduler")]),a._v(" "),r("li",[a._v("Scheduler再在这个原始的resource-request中返回分配到的资源描述Container。")])])]),a._v(" "),r("li",[a._v("每个ResourceRequest可看做一个可序列化Java对象，包含的字段信息如下：")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("\x3c!--\n- resource-name：资源名称，现阶段指的是资源所在的host和rack，后期可能还会支持虚拟机或者更复杂的网络结构\n- priority：资源的优先级\n- resource-requirement：资源的具体需求，现阶段指内存和cpu需求的数量\n- number-of-containers：满足需求的Container的集合\n--\x3e\n<resource-name, priority, resource-requirement, number-of-containers>\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br")])]),r("h3",{attrs:{id:"jobhistoryserver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jobhistoryserver"}},[a._v("#")]),a._v(" JobHistoryServer")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("mr-jobhistory-daemon.sh start historyserver\nnode01:19888\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("h3",{attrs:{id:"timeline-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#timeline-server"}},[a._v("#")]),a._v(" Timeline Server")]),a._v(" "),r("ul",[r("li",[a._v("用来写日志服务数据 , 一般来写与第三方结合的日志服务数据(比如spark等)")]),a._v(" "),r("li",[a._v("它是对jobhistoryserver功能的有效补充，jobhistoryserver只能对mapreduce类型的作业信息进行记录")]),a._v(" "),r("li",[a._v("它记录除了jobhistoryserver能够进行对作业运行过程中信息进行记录之外")]),a._v(" "),r("li",[a._v("还记录更细粒度的信息，比如任务在哪个队列中运行，运行任务时设置的用户是哪个用户。")]),a._v(" "),r("li",[a._v("根据官网的解释jobhistoryserver只能记录mapreduce应用程序的记录，timelineserver功能更强大,但不是替代jobhistory两者是功能间的互补关系.")])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/1563006522419.png#height=434&id=xU8Ni&originHeight=434&originWidth=1621&originalType=binary&ratio=1&status=done&style=none&width=1621",alt:""}})]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/TimelineServer.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网教程"),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"yarn应用运行原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn应用运行原理"}},[a._v("#")]),a._v(" YARN应用运行原理")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/yarn_architecture.gif#height=385&id=N4WZY&originHeight=385&originWidth=622&originalType=binary&ratio=1&status=done&style=none&width=622",alt:""}})]),a._v(" "),r("h3",{attrs:{id:"yarn应用提交过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn应用提交过程"}},[a._v("#")]),a._v(" YARN应用提交过程")]),a._v(" "),r("ul",[r("li",[a._v("Application在Yarn中的执行过程，整个执行过程可以总结为三步：\n"),r("ul",[r("li",[a._v("应用程序提交")]),a._v(" "),r("li",[a._v("启动应用的ApplicationMaster实例")]),a._v(" "),r("li",[a._v("ApplicationMaster 实例管理应用程序的执行")])])]),a._v(" "),r("li",[r("strong",[a._v("具体提交过程为：")]),a._v(" "),r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/Image201909161351.png#height=709&id=pId89&originHeight=709&originWidth=786&originalType=binary&ratio=1&status=done&style=none&width=786",alt:""}}),a._v(" "),r("ul",[r("li",[a._v("客户端程序向 ResourceManager 提交应用，并请求一个 ApplicationMaster 实例；")]),a._v(" "),r("li",[a._v("ResourceManager 找到一个可以运行一个 Container 的 NodeManager，并在这个 Container 中启动 ApplicationMaster 实例；")]),a._v(" "),r("li",[a._v("ApplicationMaster 向 ResourceManager 进行注册，注册之后客户端就可以查询 ResourceManager 获得自己 ApplicationMaster 的详细信息，以后就可以和自己的 ApplicationMaster 直接交互了（这个时候，客户端主动和 ApplicationMaster 交流，应用先向 ApplicationMaster 发送一个满足自己需求的资源请求）；")]),a._v(" "),r("li",[a._v("ApplicationMaster 根据 resource-request协议 向 ResourceManager 发送 resource-request请求；")]),a._v(" "),r("li",[a._v("当 Container 被成功分配后，ApplicationMaster 通过向 NodeManager 发送 "),r("strong",[a._v("container-launch-specification")]),a._v("信息 来启动Container，container-launch-specification信息包含了能够让Container 和 ApplicationMaster 交流所需要的资料；")]),a._v(" "),r("li",[a._v("应用程序的代码以 task 形式在启动的 Container 中运行，并把运行的进度、状态等信息通过 "),r("strong",[a._v("application-specific")]),a._v("协议 发送给ApplicationMaster；")]),a._v(" "),r("li",[a._v("在应用程序运行期间，提交应用的客户端主动和 ApplicationMaster 交流获得应用的运行状态、进度更新等信息，交流协议也是 "),r("strong",[a._v("application-specific")]),a._v("协议；")]),a._v(" "),r("li",[a._v("应用程序执行完成并且所有相关工作也已经完成，ApplicationMaster 向 ResourceManager 取消注册然后关闭，用到所有的 Container 也归还给系统。")])])]),a._v(" "),r("li",[r("strong",[a._v("精简版的：")]),a._v(" "),r("ul",[r("li",[a._v("步骤1：用户将应用程序提交到 ResourceManager 上；")]),a._v(" "),r("li",[a._v("步骤2：ResourceManager为应用程序 ApplicationMaster 申请资源，并与某个 NodeManager 通信启动第一个 Container，以启动ApplicationMaster；")]),a._v(" "),r("li",[a._v("步骤3：ApplicationMaster 与 ResourceManager 注册进行通信，为内部要执行的任务申请资源，一旦得到资源后，将于 NodeManager 通信，以启动对应的 Task；")]),a._v(" "),r("li",[a._v("步骤4：所有任务运行完成后，ApplicationMaster 向 ResourceManager 注销，整个应用程序运行结束。")])])])]),a._v(" "),r("h3",{attrs:{id:"mapreduce-on-yarn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce-on-yarn"}},[a._v("#")]),a._v(" MapReduce on YARN")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/820234-20160604233916133-2026396104.jpg#height=633&id=dhAjo&originHeight=633&originWidth=673&originalType=binary&ratio=1&status=done&style=none&width=673",alt:""}})]),a._v(" "),r("ul",[r("li",[a._v("提交作业\n"),r("ul",[r("li",[a._v("①程序打成jar包，在客户端运行hadoop jar命令，提交job到集群运行")]),a._v(" "),r("li",[a._v("job.waitForCompletion(true)中调用Job的submit()，此方法中调用JobSubmitter的submitJobInternal()方法；\n"),r("ul",[r("li",[a._v("②submitClient.getNewJobID()向resourcemanager请求一个MR作业id")]),a._v(" "),r("li",[a._v("检查输出目录：如果没有指定输出目录或者目录已经存在，则报错")]),a._v(" "),r("li",[a._v("计算作业分片；若无法计算分片，也会报错")]),a._v(" "),r("li",[a._v("③运行作业的相关资源，如作业的jar包、配置文件、输入分片，被上传到HDFS上一个以作业ID命名的目录（jar包副本默认为10，运行作业的任务，如map任务、reduce任务时，可从这10个副本读取jar包）")]),a._v(" "),r("li",[a._v("④调用resourcemanager的submitApplication()提交作业")])])]),a._v(" "),r("li",[a._v("客户端"),r("strong",[a._v("每秒")]),a._v("查询一下作业的进度（map 50% reduce 0%），进度如有变化，则在控制台打印进度报告；")]),a._v(" "),r("li",[a._v("作业如果成功执行完成，则打印相关的计数器")]),a._v(" "),r("li",[a._v("但如果失败，在控制台打印导致作业失败的原因（要学会查看日志，定位问题，分析问题，解决问题）")])])]),a._v(" "),r("li",[r("strong",[a._v("初始化作业")]),a._v(" "),r("ul",[r("li",[a._v("当ResourceManager(一下简称RM)收到了submitApplication()方法的调用通知后，请求传递给RM的scheduler（调度器）；调度器分配container（容器）")]),a._v(" "),r("li",[a._v("⑤a RM与指定的NodeManager通信，通知NodeManager启动容器；NodeManager收到通知后，创建占据特定资源的container；")]),a._v(" "),r("li",[a._v("⑤b 然后在container中运行MRAppMaster进程")]),a._v(" "),r("li",[a._v("⑥MRAppMaster需要接受任务（各map任务、reduce任务的）的进度、完成报告，所以appMaster需要创建多个簿记对象，记录这些信息")]),a._v(" "),r("li",[a._v("⑦从HDFS获得client计算出的输入分片split\n"),r("ul",[r("li",[a._v("每个分片split创建一个map任务")]),a._v(" "),r("li",[a._v("通过 mapreduce.job.reduces 属性值(编程时，jog.setNumReduceTasks()指定)，知道当前MR要创建多少个reduce任务")]),a._v(" "),r("li",[a._v("每个任务(map、reduce)有task id")])])])])]),a._v(" "),r("li",[r("strong",[a._v("Task 任务分配")]),a._v(" "),r("ul",[r("li",[a._v("如果小作业，appMaster会以uberized的方式运行此MR作业；appMaster会决定在它的JVM中顺序此MR的任务；\n"),r("ul",[r("li",[a._v("原因是，若每个任务运行在一个单独的JVM时，都需要单独启动JVM，分配资源（内存、CPU），需要时间；多个JVM中的任务再在各自的JVM中并行运行")]),a._v(" "),r("li",[a._v("若将所有任务在appMaster的JVM中顺序执行的话，更高效，那么appMaster就会这么做 ，任务作为uber任务运行")]),a._v(" "),r("li",[a._v("小作业判断依据：①小于10个map任务；②只有一个reduce任务；③MR输入大小小于一个HDFS块大小")]),a._v(" "),r("li",[a._v("如何开启uber?设置属性 mapreduce.job.ubertask.enable 值为true")])])])])])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('configuration.set("mapreduce.job.ubertask.enable", "true");\n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("  - 在运行任何task之前，appMaster调用setupJob()方法，创建OutputCommitter，创建作业的最终输出目录（一般为HDFS上的目录）及任务输出的临时目录（如map任务的中间结果输出目录）\n")])])]),r("ul",[r("li",[a._v("⑧若作业不以uber任务方式运行，那么appMaster会为作业中的每一个任务（map任务、reduce任务）向RM请求container\n"),r("ul",[r("li",[a._v("由于reduce任务在进入排序阶段之前，所有的map任务必须执行完成；所以，为map任务申请容器要优先于为reduce任务申请容器")]),a._v(" "),r("li",[a._v("5%的map任务执行完成后，才开始为reduce任务申请容器")]),a._v(" "),r("li",[a._v("为map任务申请容器时，遵循数据本地化，调度器尽量将容器调度在map任务的输入分片所在的节点上（移动计算，不移动数据）")]),a._v(" "),r("li",[a._v("reduce任务能在集群任意计算节点运行")]),a._v(" "),r("li",[a._v("默认情况下，为每个map任务、reduce任务分配1G内存、1个虚拟内核，由属性决定mapreduce.map.memory.mb、mapreduce.reduce.memory.mb、mapreduce.map.cpu.vcores、mapreduce.reduce.reduce.cpu.vcores")])])]),a._v(" "),r("li",[r("strong",[a._v("Task 任务执行")]),a._v(" "),r("ul",[r("li",[a._v("当调度器为当前任务分配了一个NodeManager（暂且称之为NM01）的容器，并将此信息传递给appMaster后；appMaster与NM01通信，告知NM01启动一个容器，并此容器占据特定的资源量（内存、CPU）")]),a._v(" "),r("li",[a._v("NM01收到消息后，启动容器，此容器占据指定的资源量")]),a._v(" "),r("li",[a._v("容器中运行YarnChild，由YarnChild运行当前任务（map、reduce）")]),a._v(" "),r("li",[a._v("⑩在容器中运行任务之前，先将运行任务需要的资源拉取到本地，如作业的JAR文件、配置文件、分布式缓存中的文件")])])]),a._v(" "),r("li",[r("strong",[a._v("作业运行进度与状态更新")]),a._v(" "),r("ul",[r("li",[a._v("作业job以及它的每个task都有状态（running、successfully completed、failed），当前任务的运行进度、作业计数器")]),a._v(" "),r("li",[a._v("任务在运行期间，每隔3秒向appMaster汇报执行进度、状态（包括计数器）")]),a._v(" "),r("li",[a._v("appMaster汇总目前运行的所有任务的上报的结果")]),a._v(" "),r("li",[a._v("客户端每个1秒，轮询访问appMaster获得作业执行的最新状态，若有改变，则在控制台打印出来")])])]),a._v(" "),r("li",[a._v("完成作业\n"),r("ul",[r("li",[a._v("appMaster收到最后一个任务完成的报告后，将作业状态设置为成功")]),a._v(" "),r("li",[a._v("客户端轮询appMaster查询进度时，发现作业执行成功，程序从waitForCompletion()退出")]),a._v(" "),r("li",[a._v("作业的所有统计信息打印在控制台")]),a._v(" "),r("li",[a._v("appMaster及运行任务的容器，清理中间的输出结果")]),a._v(" "),r("li",[a._v("作业信息被历史服务器保存，留待以后用户查询")])])])]),a._v(" "),r("h3",{attrs:{id:"yarn应用生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn应用生命周期"}},[a._v("#")]),a._v(" yarn应用生命周期")]),a._v(" "),r("ul",[r("li",[a._v("RM: Resource Manager")]),a._v(" "),r("li",[a._v("AM: Application Master")]),a._v(" "),r("li",[a._v("NM: Node Manager")])]),a._v(" "),r("ol",[r("li",[a._v("Client向RM提交应用，包括AM程序及启动AM的命令。")]),a._v(" "),r("li",[a._v("RM为AM分配第一个容器，并与对应的NM通信，令其在容器上启动应用的AM。")]),a._v(" "),r("li",[a._v("AM启动时向RM注册，允许Client向RM获取AM信息然后直接和AM通信。")]),a._v(" "),r("li",[a._v("AM通过资源请求协议，为应用协商容器资源。")]),a._v(" "),r("li",[a._v("如容器分配成功，AM要求NM在容器中启动应用，应用启动后可以和AM独立通信。")]),a._v(" "),r("li",[a._v("应用程序在容器中执行，并向AM汇报。")]),a._v(" "),r("li",[a._v("在应用执行期间，Client和AM通信获取应用状态。")]),a._v(" "),r("li",[a._v("应用执行完成，AM向RM注销并关闭，释放资源。\n"),r("strong",[a._v("申请资源->启动appMaster->申请运行任务的container->分发Task->运行Task->Task结束->回收container")])])]),a._v(" "),r("h2",{attrs:{id:"如何使用yarn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何使用yarn"}},[a._v("#")]),a._v(" 如何使用YARN")]),a._v(" "),r("h3",{attrs:{id:"配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[a._v("#")]),a._v(" 配置文件")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("\x3c!-- $HADOOP_HOME/etc/hadoop/mapred-site.xml --\x3e\n<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n</configuration>\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br")])]),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("\x3c!-- $HADOOP_HOME/etc/hadoop/yarn-site.xml --\x3e\n<configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n</configuration>\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br")])]),r("h3",{attrs:{id:"yarn启动停止"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn启动停止"}},[a._v("#")]),a._v(" YARN启动停止")]),a._v(" "),r("ul",[r("li",[a._v("启动 ResourceManager 和 NodeManager （以下分别简称RM、NM）")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("#主节点运行命令\n$HADOOP_HOME/sbin/start-yarn.sh\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("ul",[r("li",[a._v("停止 RM 和 NM")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("#主节点运行命令\n$HADOOP_HOME/sbin/stop-yarn.sh\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("ul",[r("li",[a._v("若RM没有启动起来，可以单独启动")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("#若RM没有启动，在主节点运行命令\n$HADOOP_HOME/sbin/yarn-daemon.sh start resouremanager\n#相反，可单独关闭\n$HADOOP_HOME/sbin/yarn-daemon.sh stop resouremanager\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("ul",[r("li",[a._v("若NM没有启动起来，可以单独启动")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("#若NM没有启动，在相应节点运行命令\n$HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager\n#相反，可单独关闭\n$HADOOP_HOME/sbin/yarn-daemon.sh stop nodemanager\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("h3",{attrs:{id:"yarn常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn常用命令"}},[a._v("#")]),a._v(" YARN常用命令")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("#1.查看正在运行的任务\nyarn application -list\n\n#2.杀掉正在运行任务\nyarn application -kill 任务id\n\n#3.查看节点列表\nyarn node -list\n\n#4.查看节点状况；所有端口号与上图中端口号要一致（随机分配）\nyarn node -status node-03:45568\n\n#5.查看yarn依赖jar的环境变量\nyarn classpath\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br"),r("span",{staticClass:"line-number"},[a._v("13")]),r("br"),r("span",{staticClass:"line-number"},[a._v("14")]),r("br")])]),r("h2",{attrs:{id:"yarn调度器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn调度器"}},[a._v("#")]),a._v(" YARN调度器")]),a._v(" "),r("p",[r("strong",[a._v("yarn分为一级调度管理和二级调度管理")]),a._v("\n一级调度管理(更近底层,更接近于操作资源, 更偏向于应用层和底层结合)\n计算资源管理(cpu,内存等,计算复杂消耗的cpu多)\nApp生命周期管理\n二级调度管理(自己代码的算法等, 更偏向于应用层)\nApp内部的计算模型管理\n多样化的计算模型")]),a._v(" "),r("ul",[r("li",[a._v("在YARN中有三种调度器可以选择：FIFO Scheduler ，Capacity Scheduler，FairS cheduler")])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/20180912140209122.png#height=1000&id=CDtqd&originHeight=1000&originWidth=382&originalType=binary&ratio=1&status=done&style=none&width=382",alt:""}})]),a._v(" "),r("h3",{attrs:{id:"fifo-scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fifo-scheduler"}},[a._v("#")]),a._v(" FIFO Scheduler")]),a._v(" "),r("ul",[r("li",[a._v("FIFO Scheduler把应用按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的应用进行分配资源，待最头上的应用需求满足后再给下一个分配，以此类推。")]),a._v(" "),r("li",[a._v("FIFO Scheduler是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的应用可能会占用所有集群资源，这就导致其它应用被阻塞。在共享集群中，更适合采用Capacity Scheduler或Fair Scheduler，这两个调度器都允许大任务和小任务在提交的同时获得一定的系统资源。")]),a._v(" "),r("li",[a._v("上图展示了这几个调度器的区别，从图中可以看出，在FIFO 调度器中，小任务会被大任务阻塞。")])]),a._v(" "),r("h3",{attrs:{id:"capacity-scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#capacity-scheduler"}},[a._v("#")]),a._v(" Capacity Scheduler")]),a._v(" "),r("ul",[r("li",[a._v("CDH版本默认使用Fair Scheduler公平调度器")])]),a._v(" "),r("p",[r("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B9%8BYarn/assets/Image201909241610.png#height=523&id=qsdWl&originHeight=523&originWidth=1612&originalType=binary&ratio=1&status=done&style=none&width=1612",alt:""}})]),a._v(" "),r("ul",[r("li",[a._v("若要使用capacity scheduler，需要修改yarn-site.xml文件；")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("<property>\n\t<name>yarn.resourcemanager.scheduler.class</name>\n\t\t\t<value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</value>\n</property>\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("ul",[r("li",[a._v("而对于Capacity调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO调度器时的时间")]),a._v(" "),r("li",[a._v("如何配置容量调度器\n"),r("ul",[r("li",[a._v("队列层级结构如下")])])])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("root \n├── prod \n└── dev \n\t├── spark \n\t└── hdp\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("ul",[r("li",[a._v("主节点上，将$HADOOP_HOME/etc/hadoop/中的对应capacity-scheduler.xml配置文件备份到其它目录")]),a._v(" "),r("li",[a._v("目录$HADOOP_HOME/etc/hadoop/中建立一个新的capacity-scheduler.xml；内容如下")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('  <?xml version="1.0" encoding="utf-8"?>\n  <configuration> \n    <property> \n      <name>yarn.scheduler.capacity.root.queues</name>  \n      <value>prod,dev</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.dev.queues</name>  \n      <value>hdp,spark</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.prod.capacity</name>  \n      <value>40</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.dev.capacity</name>  \n      <value>60</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.dev.maximum-capacity</name>  \n      <value>75</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.dev.hdp.capacity</name>  \n      <value>50</value> \n    </property>  \n    <property> \n      <name>yarn.scheduler.capacity.root.dev.spark.capacity</name>  \n      <value>50</value> \n    </property> \n  </configuration>\n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br"),r("span",{staticClass:"line-number"},[a._v("13")]),r("br"),r("span",{staticClass:"line-number"},[a._v("14")]),r("br"),r("span",{staticClass:"line-number"},[a._v("15")]),r("br"),r("span",{staticClass:"line-number"},[a._v("16")]),r("br"),r("span",{staticClass:"line-number"},[a._v("17")]),r("br"),r("span",{staticClass:"line-number"},[a._v("18")]),r("br"),r("span",{staticClass:"line-number"},[a._v("19")]),r("br"),r("span",{staticClass:"line-number"},[a._v("20")]),r("br"),r("span",{staticClass:"line-number"},[a._v("21")]),r("br"),r("span",{staticClass:"line-number"},[a._v("22")]),r("br"),r("span",{staticClass:"line-number"},[a._v("23")]),r("br"),r("span",{staticClass:"line-number"},[a._v("24")]),r("br"),r("span",{staticClass:"line-number"},[a._v("25")]),r("br"),r("span",{staticClass:"line-number"},[a._v("26")]),r("br"),r("span",{staticClass:"line-number"},[a._v("27")]),r("br"),r("span",{staticClass:"line-number"},[a._v("28")]),r("br"),r("span",{staticClass:"line-number"},[a._v("29")]),r("br"),r("span",{staticClass:"line-number"},[a._v("30")]),r("br"),r("span",{staticClass:"line-number"},[a._v("31")]),r("br")])]),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('// 指定程序提交到哪个队列，默认使用“default”队列\nconfiguration.set("mapreduce.job.queuename","hdn")\n')])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("ul",[r("li",[a._v("动态更新配置：容量调度器的配置在运行时，可以随时重新加载，调整资源分配参数；你需要编辑conf/capacity-scheduler.xml 并在yarn主节点运行命令让配置文件生效\n"),r("ul",[r("li",[a._v("另外，除非重启resourcemanager，否则队列只能添加不能删除；但允许关闭")])])])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("[hadoop@node01 hadoop]$ yarn rmadmin -refreshQueues\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br")])]),r("h3",{attrs:{id:"fair-scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fair-scheduler"}},[a._v("#")]),a._v(" Fair Scheduler")]),a._v(" "),r("p",[a._v("![](http://kflys.gitee.io/upic/2020/03/30/uPic/Hadoop架构原理之Yarn/assets/Image201907171437 (38).png)")]),a._v(" "),r("ul",[r("li",[a._v("Apache Hadoop默认使用Capacity Scheduler容量调度器")]),a._v(" "),r("li",[a._v("CDH版本默认使用Fair Scheduler公平调度器")]),a._v(" "),r("li",[a._v('若要用Fair Scheduler的话，需要配置yarn-site.xml，将属性"yarn.resourcemanager.scheduler.class"的值修改成"org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler"，如下')])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("<property>\n\t<name>yarn.resourcemanager.scheduler.class</name>\n\t<value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>\n</property>\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("ul",[r("li",[a._v("在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有运行的job动态的调整系统资源。如下图所示，当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小任务提交后，Fair调度器会分配一半资源给这个小任务，让这两个任务公平的共享集群资源。")]),a._v(" "),r("li",[a._v("需要注意的是，在下图Fair调度器中，从第二个任务提交到获得资源会有一定的延迟，因为它需要等待第一个任务释放占用的Container。小任务执行完成之后也会释放自己占用的资源，大任务又获得了全部的系统资源。最终的效果就是Fair调度器即得到了高的资源利用率又能保证小任务及时完成.")]),a._v(" "),r("li",[a._v("支持资源抢占")])]),a._v(" "),r("p",[a._v("在yarn-site.xml中设置yarn.scheduler.fair.preemption为true")]),a._v(" "),r("ul",[r("li",[a._v("可通过一个名为fair-scheduler.xml文件对公平调度器进行配置")]),a._v(" "),r("li",[a._v("此文件可放置在${HADOOP_HOME}/etc/hadoop/目录下")]),a._v(" "),r("li",[a._v("当没有设置此配置文件时，每个应用放置在以当前用户名命名的队列中")]),a._v(" "),r("li",[a._v("队列是用户提交第一个应用时动态创建的")])]),a._v(" "),r("h2",{attrs:{id:"yarn应用状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yarn应用状态"}},[a._v("#")]),a._v(" YARN应用状态")]),a._v(" "),r("p",[a._v("我们在yarn 的web ui上能够看到yarn 应用程序分为如下几个状态:")]),a._v(" "),r("ul",[r("li",[a._v("NEW -----新建状态")]),a._v(" "),r("li",[a._v("NEW_SAVING-----新建保存状态")]),a._v(" "),r("li",[a._v("SUBMITTED-----提交状态")]),a._v(" "),r("li",[a._v("ACCEPTED-----接受状态")]),a._v(" "),r("li",[a._v("RUNNING-----运行状态")]),a._v(" "),r("li",[a._v("FINISHED-----完成状态")]),a._v(" "),r("li",[a._v("FAILED-----失败状态")]),a._v(" "),r("li",[a._v("KILLED-----杀掉状态")])]),a._v(" "),r("h2",{attrs:{id:"扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[a._v("#")]),a._v(" 扩展")]),a._v(" "),r("p",[r("a",{attrs:{href:"https://hadoop.apache.org/docs/r2.7.3/hadoop-yarn/hadoop-yarn-site/CapacityScheduler.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("查看官网capacity scheduler内容"),r("OutboundLink")],1)]),a._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/u014589856/article/details/78119504",target:"_blank",rel:"noopener noreferrer"}},[a._v("capacity scheduler参考资料"),r("OutboundLink")],1)]),a._v(" "),r("p",[r("a",{attrs:{href:"https://hadoop.apache.org/docs/r2.7.3/hadoop-yarn/hadoop-yarn-site/FairScheduler.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网查看fair scheduler内容"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);