(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{502:function(e,a,t){"use strict";t.r(a);var s=t(19),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ul",[t("li",[e._v("ZooKeeper简单易用，能够很好的解决分布式框架在运行中，出现的各种协调问题。比如集群master主备切换、节点的上下线感知、统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等等")]),e._v(" "),t("li",[e._v("是Google的Chubby的一个开源实现版\n")]),e._v(" "),t("li",[e._v("一个分布式的，开源的，用于分布式应用程序的协调服务（service）、主从架构。")]),e._v(" "),t("li",[e._v("Zookeeper 作为一个分布式的服务框架\n"),t("ul",[t("li",[e._v("主要用来解决分布式集群中应用系统的一致性问题")]),e._v(" "),t("li",[e._v("它能提供基于类似于文件系统的"),t("strong",[e._v("目录节点树")]),e._v("方式的数据存储，")]),e._v(" "),t("li",[e._v("Zookeeper 作用主要是用来维护和监控存储的数据的状态变化，通过监控这些数据状态的变化，从而达到基于数据的集群管理")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201906091839.png",alt:"image"}})]),e._v(" "),t("h2",{attrs:{id:"_1-zookeeper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-zookeeper"}},[e._v("#")]),e._v(" 1. zookeeper")]),e._v(" "),t("h3",{attrs:{id:"_1-1-命令行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-命令行"}},[e._v("#")]),e._v(" 1.1 命令行")]),e._v(" "),t("ul",[t("li",[e._v("集群命令（"),t("strong",[e._v("每个节点运行此命令")]),e._v("）")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 启动ZooKeeper集群；在ZooKeeper集群中的每个节点执行此命令\n${ZK_HOME}/bin/zkServer.sh start\n# 停止ZooKeeper集群（每个节点执行以下命令）\n${ZK_HOME}/bin/zkServer.sh stop\n# 查看集群状态（每个节点执行此命令）\n${ZK_HOME}/bin/zkServer.sh status\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 使用ZooKeeper自带的脚本，连接ZooKeeper的服务器\nzkCli.sh -server node01:2181,node02:2181,node03:2181\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#查看ZooKeeper根目录/下的文件列表\nls /\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#创建节点，并指定数据\ncreate /kfly    kfly\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#获得某节点的数据\nget /kfly\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#修改节点的数据\nset /kfly kfly_top\n#删除节点\ndelete /kfly\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"_1-2-java-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java-api"}},[e._v("#")]),e._v(" 1.2 Java API")]),e._v(" "),t("ul",[t("li",[e._v("[Curator官网]")])]),e._v(" "),t("p",[e._v("http://curator.apache.org/")]),e._v(" "),t("ul",[t("li",[e._v("Curator编程")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 重试连接策略，失败重试次数；每次休眠5000毫秒\n// RetryPolicy policy = new ExponentialBackoffRetry(3000, 3);\nRetryNTimes retryPolicy = new RetryNTimes(10, 5000);\n// 设置客户端参数，参数1：指定连接的服务器集端口列表；参数2：重试策略\nclient = CuratorFrameworkFactory.newClient(ZK_ADDRESS, retryPolicy);\n// 启动客户端，连接到zk集群\nclient.start();\n\n///a/b/c\nclient.create().\n creatingParentsIfNeeded().\n withMode(CreateMode.PERSISTENT).\n forPath("/kfly/top/orchid", zNodeData.getBytes());\n\n// 查询节点列表\nclient.getChildren().forPath("/")\n// 删除节点\nclient.delete().forPath(ZK_PATH);\n// 查询节点数据\nclient.getData().forPath(ZK_PATH)\n// 修改节点数据\nclient.setData().forPath(ZK_PATH, data2.getBytes())\n    \n//设置节点的cache\nTreeCache treeCache = new TreeCache(client, "/zk_test");\n//设置监听器和处理过程\ntreeCache.getListenable().addListener(new TreeCacheListener(){\n\n})\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br")])]),t("h2",{attrs:{id:"_2-基本概念和操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本概念和操作"}},[e._v("#")]),e._v(" 2. 基本概念和操作")]),e._v(" "),t("blockquote",[t("p",[e._v("分布式通信有几种方式")]),e._v(" "),t("p",[e._v("1、直接通过网络连接的方式进行通信；")]),e._v(" "),t("p",[e._v("2、通过共享存储的方式，来进行通信或数据的传输")]),e._v(" "),t("p",[e._v("ZooKeeper使用第二种方式，提供分布式协调服务")])]),e._v(" "),t("h3",{attrs:{id:"_2-1-数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-数据结构"}},[e._v("#")]),e._v(" 2.1 数据结构")]),e._v(" "),t("p",[t("strong",[e._v("ZooKeeper=①简版文件系统(Znode)+②原语+③通知机制(Watcher)。")])]),e._v(" "),t("ul",[t("li",[e._v("ZK文件系统\n"),t("ul",[t("li",[e._v("基于类似于文件系统的"),t("strong",[e._v("目录节点树")]),e._v("方式的数据存储")])])]),e._v(" "),t("li",[e._v("原语\n"),t("ul",[t("li",[e._v("可简单理解成ZooKeeper的基本的命令")])])]),e._v(" "),t("li",[e._v("Watcher（监听器）")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/fcfaaf51f3deb48f36625a57fa1f3a292df57834.jpg",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201909181739.png",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"_2-2-数据节点znode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数据节点znode"}},[e._v("#")]),e._v(" 2.2 "),t("strong",[e._v("数据节点")]),e._v("ZNode")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th",[e._v("持久节点")]),e._v(" "),t("th",[e._v("临时节点")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("非有序节点")]),e._v(" "),t("td",[e._v("create")]),e._v(" "),t("td",[e._v("create -e")])]),e._v(" "),t("tr",[t("td",[e._v("有序节点")]),e._v(" "),t("td",[e._v("create -s")]),e._v(" "),t("td",[e._v("create -s -e")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-3-会话-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-会话-session"}},[e._v("#")]),e._v(" 2.3 会话（Session)")]),e._v(" "),t("ul",[t("li",[e._v("客户端要对ZooKeeper集群进行读写操作，得先与某一ZooKeeper服务器建立TCP长连接；此TCP长连接称为建立一个会话Session。")]),e._v(" "),t("li",[e._v("每个会话有超时时间：SessionTimeout\n"),t("ul",[t("li",[e._v("当客户端与集群建立会话后，如果超过SessionTimeout时间，两者间没有通信，会话超时")])])])]),e._v(" "),t("p",[t("strong",[e._v("特点")])]),e._v(" "),t("ul",[t("li",[e._v("客户端打开一个Session中的请求以FIFO（先进先出）的顺序执行；\n"),t("ul",[t("li",[e._v("如客户端client01与集群建立会话后，先发出一个create请求，再发出一个get请求；")]),e._v(" "),t("li",[e._v("那么在执行时，会先执行create，再执行get")])])]),e._v(" "),t("li",[e._v("若打开两个Session，无法保证Session间，请求FIFO执行；只能保证一个session中请求的FIFO")])]),e._v(" "),t("p",[t("strong",[e._v("生命周期")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201905311514.png",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"_2-4-事务zxid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-事务zxid"}},[e._v("#")]),e._v(" 2.4 事务zxid")]),e._v(" "),t("ul",[t("li",[e._v("事务\n"),t("ul",[t("li",[e._v("客户端的写请求，会对ZooKeeper中的数据做出更改；如增删改的操作")]),e._v(" "),t("li",[e._v("每次写请求，会生成一次事务")]),e._v(" "),t("li",[e._v("每个事务有一个全局唯一的事务ID，用 ZXID 表示；全局自增")])])]),e._v(" "),t("li",[e._v("事务特点\n"),t("ul",[t("li",[e._v("ACID：")]),e._v(" "),t("li",[e._v("原子性atomicity | 一致性consistency | 隔离性isolation | 持久性durability")])])]),e._v(" "),t("li",[e._v("ZXID结构：\n"),t("ul",[t("li",[e._v("通常是一个64位的数字。由"),t("strong",[e._v("epoch+counter")]),e._v("组成")]),e._v(" "),t("li",[e._v("epoch、counter各32位")])])])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cd /kfly/install/zookeeper-3.4.5-cdh5.14.2/zkdatas/version-2\ncat currentEpoch \n4 # 记录当前leader是选举出来的第几任\n\nget /kfly kfly\ncZxid = 0x400000007 # 第四任leader通过的第七个事务\n# zxid = epoch(32位) + counter(32位)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h3",{attrs:{id:"_2-5-watcher监视与通知"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-watcher监视与通知"}},[e._v("#")]),e._v(" 2.5 Watcher监视与通知")]),e._v(" "),t("h3",{attrs:{id:"_2-5-1-获取最新数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-获取最新数据"}},[e._v("#")]),e._v(" 2.5.1 获取最新数据")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("方式一")]),e._v("轮询：ZooKeeper以远程服务的方式，被客户端访问；客户端以轮询的方式获得znode数据，效率会比较低（代价比较大）")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201905291811.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("方式二")]),e._v(" 基于通知的机制：\n"),t("ul",[t("li",[e._v("客户端在znode上注册一个Watcher监视器")]),e._v(" "),t("li",[e._v("当znode上数据出现变化，watcher监测到此变化，通知客户端")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201905291818.png",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"_2-5-2-事件监听器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-事件监听器"}},[e._v("#")]),e._v(" 2.5.2 事件监听器；")]),e._v(" "),t("ul",[t("li",[e._v("watcher用于监听znode上的某些事件\n"),t("ul",[t("li",[e._v("比如znode数据修改、节点增删等；")]),e._v(" "),t("li",[e._v("当监听到事件后，watcher会触发通知客户端")])])])]),e._v(" "),t("blockquote",[t("p",[e._v("注意："),t("strong",[e._v("Watcher是一个单次触发的操作")])])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# stat path [watch] 查看path节点状态\n# ls path [watch]  查看节点有哪些子节点\n# ls2 path [watch] 查看节点有哪些子节点、状态、相当于ls+stat\n# get path [watch] 获得节点各种数据\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h2",{attrs:{id:"_3-工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-工作原理"}},[e._v("#")]),e._v(" 3. 工作原理")]),e._v(" "),t("ul",[t("li",[e._v("ZooKeeper使用原子广播协议叫做Zab(ZooKeeper Automic Broadcast)协议")]),e._v(" "),t("li",[e._v("Zab协议有两种模式\n"),t("ul",[t("li",[t("strong",[e._v("恢复模式（选主）")]),e._v("：因为ZooKeeper也是主从架构；当ZooKeeper集群没有主的角色leader时，从众多服务器中选举leader时，处于此模式")]),e._v(" "),t("li",[t("strong",[e._v("广播模式（同步）")]),e._v("：当集群有了leader后，客户端向ZooKeeper集群读写数据时，集群处于此模式")])])]),e._v(" "),t("li",[e._v("为了保证事务的顺序一致性，ZooKeeper采用了递增的事务id号（zxid）来标识事务，所有提议（proposal）都有zxid")])]),e._v(" "),t("h2",{attrs:{id:"_4-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用场景"}},[e._v("#")]),e._v(" 4. 应用场景")]),e._v(" "),t("ul",[t("li",[e._v("ZooKeeper应用场景")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/20170221224856838.png",alt:"image"}})]),e._v(" "),t("ol",[t("li",[e._v("NameNode使用ZooKeeper实现高可用.")]),e._v(" "),t("li",[e._v("Yarn ResourceManager使用ZooKeeper实现高可用.")]),e._v(" "),t("li",[e._v("利用ZooKeeper对HBase集群做高可用配置")]),e._v(" "),t("li",[e._v("kafka使用ZooKeeper\n"),t("ol",[t("li",[e._v("保存消息消费信息比如offset.")]),e._v(" "),t("li",[e._v("用于检测崩溃")])])])]),e._v(" "),t("ul",[t("li",[e._v("主题topic发现\n"),t("ul",[t("li",[e._v("保持主题的生产和消费状态")])])])]),e._v(" "),t("h2",{attrs:{id:"_5-acl访问控制列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-acl访问控制列表"}},[e._v("#")]),e._v(" 5. ACL访问控制列表")]),e._v(" "),t("p",[e._v("​\t\tzk做为分布式架构中的重要中间件，通常会在上面以节点的方式存储一些关键信息，默认情况下，所有应用都可以读写任何节点，在复杂的应用中，这不太安全，ZK通过ACL机制来解决访问权限问题\\")]),e._v(" "),t("p",[e._v("​\t\tACL(Access Control List)可以设置某些客户端，对zookeeper服务器上节点的权限，如增删改查等")]),e._v(" "),t("p",[e._v("​\t\tZooKeeper 采用 ACL（Access Control Lists）策略来进行权限控制。ZooKeeper 定义了如下5种权限。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("CREATE: 创建"),t("strong",[e._v("子节点")]),e._v("的权限。")])]),e._v(" "),t("li",[t("p",[e._v("READ: 获取节点数据和子节点列表的权限。")])]),e._v(" "),t("li",[t("p",[e._v("WRITE：更新节点数据的权限。")])]),e._v(" "),t("li",[t("p",[e._v("DELETE: 删除"),t("strong",[e._v("子节点")]),e._v("的权限。")])]),e._v(" "),t("li",[t("p",[e._v("ADMIN: 设置节点ACL的权限。")])])]),e._v(" "),t("blockquote",[t("p",[e._v("注意：CREATE 和 DELETE 都是针对子节点的权限控制。")])]),e._v(" "),t("h3",{attrs:{id:"_5-1-设置acl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-设置acl"}},[e._v("#")]),e._v(" 5.1 设置ACL")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("五种权限简称")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("CREATE -> 增 -> c\nREAD -> 查 -> r\nWRITE -> 改 -> w\nDELETE -> 删 -> d\nADMIN -> 管理 -> a\n这5种权限简写为**crwda**\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("鉴权模式")])])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- world：默认方式，相当于全世界都能访问\n- auth：代表已经认证通过的用户(cli中可以通过addauth digest user:pwd 来添加当前上下文中的授权用户)\n- digest：即用户名:密码这种方式认证，这也是业务系统中最常用的\n- ip：使用Ip地址认证\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("ol",[t("li",[e._v("演示auth方式")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 1）增加一个认证用户\n# addauth digest 用户名:密码明文\naddauth digest kfly:kflt\n\n# 2）设置权限\n# setAcl /path auth:用户名:密码明文:权限\nsetAcl /zk_test auth:kfly:kfly:rw\n\n# 3）查看ACL设置\ngetAcl /zk_test\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("h2",{attrs:{id:"_6-hdfs-ha方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-hdfs-ha方案"}},[e._v("#")]),e._v(" 6. HDFS HA方案")]),e._v(" "),t("ul",[t("li",[e._v("关于ZooKeeper监听器有三个重要的逻辑：\n"),t("ul",[t("li",[t("strong",[e._v("注册")]),e._v("：客户端向ZooKeeper集群注册监听器")]),e._v(" "),t("li",[t("strong",[e._v("监听事件")]),e._v("：监听器负责监听特定的事件")]),e._v(" "),t("li",[t("strong",[e._v("回调函数")]),e._v("：当监听器监听到事件的发生后，调用注册监听器时定义的回调函数")])])])]),e._v(" "),t("h3",{attrs:{id:"_6-1-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-原理"}},[e._v("#")]),e._v(" 6.1 原理")]),e._v(" "),t("blockquote",[t("p",[e._v("关键逻辑：")]),e._v(" "),t("p",[e._v("①监听器："),t("strong",[e._v("注册、监听事件、回调函数")])]),e._v(" "),t("p",[e._v("②共享存储：JournalNode")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201905211519.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("在Hadoop 1.x版本，HDFS集群的NameNode一直存在单点故障问题：\n"),t("ul",[t("li",[e._v("集群只存在一个NameNode节点，它维护了HDFS所有的元数据信息")]),e._v(" "),t("li",[e._v("当该节点所在服务器宕机或者服务不可用，整个HDFS集群处于不可用状态")])])]),e._v(" "),t("li",[e._v("Hadoop 2.x版本提出了高可用 (High Availability, HA) 解决方案")])]),e._v(" "),t("blockquote",[t("p",[e._v("HDFS HA方案，主要分两部分：")]),e._v(" "),t("p",[e._v("①元数据同步")]),e._v(" "),t("p",[e._v("②主备切换")])]),e._v(" "),t("ul",[t("li",[e._v("元数据同步")]),e._v(" "),t("li",[e._v("在同一个HDFS集群，运行两个互为主备的NameNode节点。\n"),t("ul",[t("li",[e._v("一台为主Namenode节点，处于Active状态，一台为备NameNode节点，处于Standby状态。")]),e._v(" "),t("li",[e._v("其中只有Active NameNode对外提供读写服务，Standby NameNode会根据Active NameNode的状态变化，在必要时"),t("strong",[e._v("切换")]),e._v("成Active状态。")]),e._v(" "),t("li",[t("strong",[e._v("JournalNode集群")]),e._v(" "),t("ul",[t("li",[e._v("在主备切换过程中，新的Active NameNode必须确保与原Active NamNode元数据同步完成，才能对外提供服务")]),e._v(" "),t("li",[e._v("所以用JournalNode集群作为共享存储系统；")]),e._v(" "),t("li",[e._v("当客户端对HDFS做操作，会在Active NameNode中edits.log文件中作日志记录，同时日志记录也会写入JournalNode集群；负责存储HDFS新产生的元数据")]),e._v(" "),t("li",[e._v("当有新数据写入JournalNode集群时，Standby NameNode能监听到此情况，将新数据同步过来")]),e._v(" "),t("li",[e._v("Active NameNode(写入)和Standby NameNode(读取)实现元数据同步")]),e._v(" "),t("li",[e._v("另外，所有datanode会向两个主备namenode做block report")])])])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201909200732.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[t("p",[e._v("②主备切换")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("ZKFC涉及角色")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("每个NameNode节点上各有一个ZKFC进程")])]),e._v(" "),t("li",[t("p",[e._v("ZKFC即ZKFailoverController，作为独立进程存在，负责控制NameNode的主备切换")])]),e._v(" "),t("li",[t("p",[e._v("ZKFC会监控NameNode的健康状况，当发现Active NameNode异常时，通过Zookeeper集群进行namenode主备选举，完成Active和Standby状态的切换")]),e._v(" "),t("ul",[t("li",[e._v("ZKFC在启动时，同时会初始化HealthMonitor和ActiveStandbyElector服务")]),e._v(" "),t("li",[e._v("ZKFC同时会向HealthMonitor和ActiveStandbyElector注册相应的回调方法（如上图的①回调、②回调）")]),e._v(" "),t("li",[t("strong",[e._v("HealthMonitor")]),e._v("定时调用NameNode的HAServiceProtocol RPC接口(monitorHealth和getServiceStatus)，监控NameNode的健康状态并向ZKFC反馈")]),e._v(" "),t("li",[t("strong",[e._v("ActiveStandbyElector")]),e._v("接收ZKFC的选举请求，通过Zookeeper自动完成namenode主备选举")]),e._v(" "),t("li",[e._v("选举完成后回调ZKFC的主备切换方法对NameNode进行Active和Standby状态的切换")])])])])]),e._v(" "),t("li",[t("p",[e._v("**主备选举过程：**两个ZKFC通过各自ActiveStandbyElector发起NameNode的主备选举，这个过程利用Zookeeper的写一致性和临时节点机制实现")]),e._v(" "),t("ul",[t("li",[e._v("当发起一次"),t("strong",[e._v("主备")]),e._v("选举时，ActiveStandbyElector会尝试在Zookeeper创建临时节点"),t("code",[e._v("/hadoop-ha/${dfs.nameservices}/ActiveStandbyElectorLock")]),e._v("，Zookeeper的写一致性保证最终只会有一个ActiveStandbyElector创建成功")])])]),e._v(" "),t("li",[t("p",[e._v("ActiveStandbyElector从ZooKeeper获得选举结果")]),e._v(" "),t("ul",[t("li",[e._v("创建成功的 ActiveStandbyElector回调ZKFC的回调方法②，将对应的NameNode切换为Active NameNode状态")])])]),e._v(" "),t("li",[t("p",[e._v("而创建失败的ActiveStandbyElector回调ZKFC的回调方法②，将对应的NameNode切换为Standby NameNode状态")])]),e._v(" "),t("li",[t("p",[e._v("不管是否选举成功，所有ActiveStandbyElector都会在临时节点ActiveStandbyElectorLock上注册一个Watcher监听器，来监听这个节点的状态变化事件")]),e._v(" "),t("ul",[t("li",[e._v("如果Active NameNode对应的HealthMonitor检测到NameNode状态异常时，通知对应ZKFC")])])]),e._v(" "),t("li",[t("p",[e._v("ZKFC会调用 ActiveStandbyElector 方法，删除在Zookeeper上创建的临时节点ActiveStandbyElectorLock")]),e._v(" "),t("ul",[t("li",[e._v("此时，Standby NameNode的ActiveStandbyElector注册的Watcher就会监听到此节点的 NodeDeleted事件。")])])]),e._v(" "),t("li",[t("p",[e._v("收到这个事件后，此ActiveStandbyElector发起主备选举，成功创建临时节点ActiveStandbyElectorLock，如果创建成功，则Standby NameNode被选举为Active NameNode（过程同上）")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("如何防止脑裂")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("脑裂\n在分布式系统中双主现象又称为脑裂，由于Zookeeper的“假死”、长时间的垃圾回收或其它原因都可能导致双Active NameNode现象，此时两个NameNode都可以对外提供服务，无法保证数据一致性")])]),e._v(" "),t("li",[t("p",[e._v("隔离")]),e._v(" "),t("p",[e._v("​\t对于生产环境，这种情况的出现是毁灭性的，必须通过自带的**隔离（Fencing）**机制预防此类情况")])]),e._v(" "),t("li",[t("p",[e._v("原理")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("ActiveStandbyElector成功创建ActiveStandbyElectorLock临时节点后，会创建另一个ActiveBreadCrumb持久节点")])]),e._v(" "),t("li",[t("p",[e._v("ActiveBreadCrumb持久节点保存了Active NameNode的地址信息")])]),e._v(" "),t("li",[t("p",[e._v("当Active NameNode在正常的状态下断开Zookeeper Session，会一并删除临时节点ActiveStandbyElectorLock、持久节点ActiveBreadCrumb")])]),e._v(" "),t("li",[t("p",[e._v("但是如果ActiveStandbyElector在异常的状态下关闭Zookeeper Session，那么持久节点ActiveBreadCrumb会保留下来（此时有可能由于active NameNode与ZooKeeper通信不畅导致，所以此NameNode"),t("strong",[e._v("还处于active状态")]),e._v("）")])]),e._v(" "),t("li",[t("p",[e._v("当另一个NameNode要由standy变成active状态时，会发现上一个Active NameNode遗留下来的ActiveBreadCrumb节点，那么会回调ZKFailoverController的方法对旧的Active NameNode进行隔离（fencing）")]),e._v(" "),t("blockquote",[t("p",[e._v("​\t\t①首先ZKFC会尝试调用旧Active NameNode的HAServiceProtocol RPC接口的transitionToStandby方法，看能否将其状态切换为Standby")]),e._v(" "),t("p",[e._v("​\t\t②如果transitionToStandby方法切换状态失败，那么就需要执行Hadoop自带的隔离措施，Hadoop目前主要提供两种隔离措施：\nsshfence：SSH to the Active NameNode and kill the process；\nshellfence：run an arbitrary shell command to fence the Active NameNode")]),e._v(" "),t("p",[e._v("​\t\t③只有成功地fencing之后，选主成功的ActiveStandbyElector才会回调ZKFC的becomeActive方法将对应的NameNode切换为Active，开始对外提供服务")])])])])])])])]),e._v(" "),t("h2",{attrs:{id:"_7-zookeeper读写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-zookeeper读写"}},[e._v("#")]),e._v(" 7. ZooKeeper读写")]),e._v(" "),t("h3",{attrs:{id:"_7-1-zookeeper集群架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-zookeeper集群架构图"}},[e._v("#")]),e._v(" 7.1 ZooKeeper集群架构图")]),e._v(" "),t("ul",[t("li",[e._v("ZooKeeper集群也是主从架构\n"),t("ul",[t("li",[e._v("主角色：leader")]),e._v(" "),t("li",[e._v("从角色：follower或observer；统称为learner")])])])]),e._v(" "),t("h3",{attrs:{id:"_7-2-读操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-读操作"}},[e._v("#")]),e._v(" 7.2 读操作")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201910251149.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("常见的读取操作，如ls /查看目录；get /zktest查询ZNode数据")]),e._v(" "),t("li",[e._v("读操作\n"),t("ul",[t("li",[e._v("客户端先与某个ZK服务器建立Session")]),e._v(" "),t("li",[e._v("然后，直接从此ZK服务器读取数据，并返回客户端即可")]),e._v(" "),t("li",[e._v("关闭Session")])])])]),e._v(" "),t("h3",{attrs:{id:"_7-3-写操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-写操作"}},[e._v("#")]),e._v(" 7.3 写操作")]),e._v(" "),t("ul",[t("li",[e._v("写操作比较复杂；为了便于理解，先举个生活中的例子：去银行存钱\n"),t("ul",[t("li",[e._v("银行柜台共有5个桂圆姐姐，编程从①到⑤，其中③是"),t("strong",[e._v("领导leader")])]),e._v(" "),t("li",[e._v("有两个客户")]),e._v(" "),t("li",[e._v("客户①找到桂圆①，说：昨天少给我存了1000万，现在需要给我加进去")]),e._v(" "),t("li",[e._v("桂圆①说，对不起先生，我没有这么大的权限，请你稍等一下，我向领导"),t("strong",[e._v("leader")]),e._v("③汇报一下")]),e._v(" "),t("li",[e._v("领导③收到消息后，为了做出英明的决策，要征询下属的意见("),t("strong",[e._v("proposal")]),e._v(")①②④⑤")]),e._v(" "),t("li",[e._v("只要有"),t("strong",[e._v("过半数quorum")]),e._v("（5/2+1=3，包括leader自己）同意，则leader做出决定("),t("strong",[e._v("commit")]),e._v(")，同意此事")]),e._v(" "),t("li",[e._v("leader告知所有下属follower，你们都记下此事生效")]),e._v(" "),t("li",[e._v("桂圆①答复客户①，说已经给您账号里加了1000万")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image2019061212537.png",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201910251203.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("客户端写操作\n"),t("ul",[t("li",[e._v("①客户端向zk集群写入数据，如create /kfly；与一个follower建立Session连接，从节点follower01")]),e._v(" "),t("li",[e._v("②follower将写请求转发给leader")]),e._v(" "),t("li",[e._v("③leader收到消息后，发出"),t("strong",[e._v("proposal提案")]),e._v("（创建/kfly），每个follower先"),t("strong",[e._v("记录下")]),e._v("要创建/kfly")]),e._v(" "),t("li",[e._v("④超过"),t("strong",[e._v("半数quorum")]),e._v("（包括leader自己）同意提案，则leader提交"),t("strong",[e._v("commit提案")]),e._v("，leader本地创建/kfly节点ZNode")]),e._v(" "),t("li",[e._v("⑤leader通知所有follower，也commit提案；follower各自在本地创建/kfly")]),e._v(" "),t("li",[e._v("⑥follower01响应client")])])])]),e._v(" "),t("h3",{attrs:{id:"_7-4-zookeeper状态同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-zookeeper状态同步"}},[e._v("#")]),e._v(" 7.4 ZooKeeper状态同步")]),e._v(" "),t("blockquote",[t("p",[e._v("完成leader选举后，zk就进入ZooKeeper之间状态同步过程")])]),e._v(" "),t("ol",[t("li",[e._v("leader构建NEWLEADER封包，包含leader中最大的zxid值；广播给其它follower")]),e._v(" "),t("li",[e._v("follower收到后，如果自己的最大zxid小于leader的，则需要与leader状态同步；否则不需要")]),e._v(" "),t("li",[e._v("leader给需要同步的每个follower创建LearnerHandler线程，负责数据同步请求")]),e._v(" "),t("li",[e._v("leader主线程等待LearnHandler线程处理结果")]),e._v(" "),t("li",[e._v("只有多数follower完成同步，leader才开始对外服务，响应写请求")]),e._v(" "),t("li",[e._v("LearnerHandler线程处理逻辑\n"),t("ol",[t("li",[e._v("接收follower封包FOLLOWERINFO，包含此follower最大zxid（代称f-max-zxid）")]),e._v(" "),t("li",[e._v("f-max-zxid与leader最大zxid（代称l-max-zxid）比较")]),e._v(" "),t("li",[e._v("若相等，说明当前follower是最新的")]),e._v(" "),t("li",[e._v("另外，若在判断期间，有没有新提交的proposal\n"),t("ol",[t("li",[e._v("如果有那么会发送DIFF封包将有差异的数据同步过去.同时将follower没有的数据逐个发送COMMIT封包给follower要求记录下来.")]),e._v(" "),t("li",[e._v("如果follower数据id更大,那么会发送TRUNC封包告知截除多余数据.")]),e._v(" "),t("li",[e._v("如果这一阶段内没有提交的提议值,直接发送SNAP封包将快照同步发送给follower.")])])]),e._v(" "),t("li",[e._v("以上消息完毕之后,发送UPTODATE封包告知follower当前数据就是最新的了")]),e._v(" "),t("li",[e._v("再次发送NEWLEADER封包宣称自己是leader,等待follower的响应.")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201906140856.png",alt:"image"}})]),e._v(" "),t("h2",{attrs:{id:"_8-zookeeper服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-zookeeper服务"}},[e._v("#")]),e._v(" 8. ZooKeeper服务")]),e._v(" "),t("h3",{attrs:{id:"_8-1-架构问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-架构问题"}},[e._v("#")]),e._v(" 8.1 "),t("strong",[e._v("架构问题")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/zkservice.jpg",alt:"image"}})]),e._v(" "),t("ul",[t("li",[e._v("leader很重要？")]),e._v(" "),t("li",[e._v("如果没有leader怎么办？\n"),t("ul",[t("li",[e._v("开始选举新的leader")])])]),e._v(" "),t("li",[t("strong",[e._v("ZooKeeper服务器四种状态：")]),e._v(" "),t("ul",[t("li",[e._v("looking：服务器处于寻找Leader群首的状态")]),e._v(" "),t("li",[e._v("leading：服务器作为群首时的状态")]),e._v(" "),t("li",[e._v("following：服务器作为follower跟随者时的状态")]),e._v(" "),t("li",[e._v("observing：服务器作为观察者时的状态")])])])]),e._v(" "),t("blockquote",[t("p",[e._v("leader选举分"),t("strong",[e._v("两种情况")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("全新集群leader选举")])]),e._v(" "),t("li",[t("p",[e._v("非全新集群leader选举")])])])]),e._v(" "),t("h3",{attrs:{id:"_8-2-全新集群leader选举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-全新集群leader选举"}},[e._v("#")]),e._v(" 8.2 全新集群leader选举")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201906130749.png",alt:"image"}})]),e._v(" "),t("ul",[t("li",[t("p",[e._v("以3台机器组成的ZooKeeper集群为例")])]),e._v(" "),t("li",[t("p",[e._v("原则：集群中过"),t("strong",[e._v("半数")]),e._v("（多数派quorum）Server启动后，才能选举出Leader；")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("此处quorum数是多少？3/2+1=2")])]),e._v(" "),t("li",[t("p",[e._v("即quorum=集群服务器数除以2，再加1")])])])]),e._v(" "),t("li",[t("p",[e._v("理解leader选举前，先了解几个概念")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- 选举过程中，每个server需发出投票；投票信息**vote信息**结构为(sid, zxid)\n\n    全新集群，server1~3初始投票信息分别为：\n\n   server1 ->  **(1, 0)**\n   server2 ->  **(2, 0)**\n   server3 ->  **(3, 0)**\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])])]),e._v(" "),t("li",[t("ul",[t("li",[t("strong",[e._v("leader选举公式")]),e._v("：\nserver1 vote信息 (sid1,zxid1)\nserver2 vote信息 (sid2,zxid2)\n"),t("strong",[e._v("①zxid大的server胜出；")]),e._v(" "),t("strong",[e._v("②若zxid相等，再根据判断sid判断，sid大的胜出")])])])]),e._v(" "),t("li",[t("p",[e._v("选举leader流程：")]),e._v(" "),t("blockquote",[t("p",[e._v("假设按照ZK1、ZK2、ZK3的依次启动")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("启动ZK1后，投票给自己，vote信息(1,0)，没有过半数，选举不出leader")])]),e._v(" "),t("li",[t("p",[e._v("再启动ZK2；ZK1和ZK2票投给自己及其他服务器；ZK1的投票为(1, 0)，ZK2的投票为(2, 0)")])]),e._v(" "),t("li",[t("p",[e._v("处理投票。每个server将收到的多个投票做处理")]),e._v(" "),t("ul",[t("li",[e._v("如ZK1投给自己的票(1,0)与ZK2传过来的票(2,0)比较；")]),e._v(" "),t("li",[e._v("利用leader选举公式，因为zxid都为0，相等；所以判断sid最大值；2>1；ZK1更新自己的投票为(2, 0)")]),e._v(" "),t("li",[e._v("ZK2也是如此逻辑，ZK2更新自己的投票为(2,0)")])])]),e._v(" "),t("li",[t("p",[e._v("再次发起投票")]),e._v(" "),t("ul",[t("li",[e._v("ZK1、ZK2上的投票都是(2,0)")]),e._v(" "),t("li",[e._v("发起投票后，ZK1上有一个自己的票(2,0)和一票来自ZK2的票(2,0)，这两票都选ZK2为leader")]),e._v(" "),t("li",[e._v("ZK2上有一个自己的票(2,0)和一票来自ZK1的票(2,0)，这两票都选ZK2为leader")]),e._v(" "),t("li",[e._v("统计投票。server统计投票信息，是否有半数server投同一个服务器为leader；\n"),t("ul",[t("li",[e._v("ZK2当选2票；多数")])])]),e._v(" "),t("li",[e._v("改变服务器状态。确定Leader后，各服务器更新自己的状态\n"),t("ul",[t("li",[e._v("更改ZK2状态从looking到leading，为Leader")]),e._v(" "),t("li",[e._v("更改ZK1状态从looking到following，为Follower")])])])])]),e._v(" "),t("li",[t("p",[e._v("当K3启动时，发现已有Leader，不再选举，直接从LOOKING改为FOLLOWING")])])])]),e._v(" "),t("li",[t("p",[e._v("选举原理同上比较zxid、sid")])])]),e._v(" "),t("h2",{attrs:{id:"_9-zab算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-zab算法"}},[e._v("#")]),e._v(" 9. ZAB算法")]),e._v(" "),t("h3",{attrs:{id:"_9-1-仲裁quorum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-仲裁quorum"}},[e._v("#")]),e._v(" 9.1 仲裁quorum")]),e._v(" "),t("ul",[t("li",[e._v("什么是仲裁quorum？\n"),t("ul",[t("li",[e._v("发起proposal时，只要多数派同意，即可生效")])])]),e._v(" "),t("li",[e._v("为什么要仲裁？\n"),t("ul",[t("li",[e._v("多数据派不需要所有的服务器都响应，proposal就能生效")]),e._v(" "),t("li",[e._v("且能提高集群的响应速度")])])]),e._v(" "),t("li",[e._v("quorum数如何选择？\n"),t("ul",[t("li",[t("strong",[e._v("集群节点数 / 2 + 1")])]),e._v(" "),t("li",[e._v("如3节点的集群：quorum数=3/2+1=2")])])])]),e._v(" "),t("h3",{attrs:{id:"_9-2-网络分区、脑裂"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-网络分区、脑裂"}},[e._v("#")]),e._v(" 9.2 网络分区、脑裂")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("网络分区：网络通信故障，集群被分成了2部分")])]),e._v(" "),t("li",[t("p",[e._v("脑裂：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("原leader处于一个分区；")])]),e._v(" "),t("li",[t("p",[e._v("另外一个分区选举出新的leader")])]),e._v(" "),t("li",[t("p",[e._v("集群出现2个leader")])])])])]),e._v(" "),t("h3",{attrs:{id:"_9-3-zab算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-zab算法"}},[e._v("#")]),e._v(" 9.3 ZAB算法")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/#replication",target:"_blank",rel:"noopener noreferrer"}},[e._v("raft算法动图地址"),t("OutboundLink")],1)])]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("ZAB与RAFT相似，区别如下：")]),e._v("\n1、zab心跳从follower到leader；raft相反\n2、zab任期叫epoch")])]),e._v(" "),t("li",[t("p",[e._v("一下以RAFT算法动图为例，分析ZAB算法")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/%E8%84%91%E8%A3%82.gif",alt:"image"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/%E8%84%91%E8%A3%82-1560463867696.png",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"_9-4-zookeeper服务器个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-zookeeper服务器个数"}},[e._v("#")]),e._v(" 9.4 ZooKeeper服务器个数")]),e._v(" "),t("ul",[t("li",[e._v("仲裁模式下，服务器个数最好为奇数个。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("quorum数=3/2+1=2\n集群数             quorum数         最大可容灾数\n5 / 2 + 1 = 3                           5-3=2\n6 / 2 +1 =  4                           6-4=2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h2",{attrs:{id:"_10-分布式锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-分布式锁"}},[e._v("#")]),e._v(" 10. 分布式锁")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/assets/Image201906121639.png",alt:"image"}})]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("create -s -e /locker/node_ ndata\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote")])}),[],!1,null,null,null);a.default=r.exports}}]);