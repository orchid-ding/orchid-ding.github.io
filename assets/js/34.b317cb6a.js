(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{520:function(s,n,a){"use strict";a.r(n);var e=a(19),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[s._v("#")]),s._v(" 异常处理")]),s._v(" "),a("h3",{attrs:{id:"_1-异常场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异常场景"}},[s._v("#")]),s._v(" 1 异常场景")]),s._v(" "),a("ul",[a("li",[s._v("来看看下面一段代码")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  def main(args: Array[String]): Unit = {\n   val i = 10 / 0\n    \n    println("你好！")\n  }\n\nException in thread "main" java.lang.ArithmeticException: / by zero\n\tat ForDemo$.main(ForDemo.scala:3)\n\tat ForDemo.main(ForDemo.scala)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v('执行程序，可以看到scala抛出了异常，而且没有打印出来"你好"。说明程序出现错误后就终止了。那怎么解决该问题呢？')])]),s._v(" "),a("h3",{attrs:{id:"_2-捕获异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-捕获异常"}},[s._v("#")]),s._v(" 2 捕获异常")]),s._v(" "),a("ul",[a("li",[s._v("在scala中，可以使用异常处理来解决这个问题。\n"),a("ul",[a("li",[s._v("在Scala里，借用了模式匹配的思想来做异常的匹配")]),s._v(" "),a("li",[s._v("以下为scala中try...catch异常处理的语法格式：")])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("try {\n    // 代码\n}\ncatch {\n    case ex:异常类型1 => // 代码\n    case ex:异常类型2 => // 代码\n}\nfinally {\n    // 代码\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("try中的代码是我们编写的业务处理代码")]),s._v(" "),a("li",[s._v("在catch中表示当出现某个异常时，需要执行的代码")]),s._v(" "),a("li",[s._v("在finally中，是不管是否出现异常都会执行的代码")]),s._v(" "),a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('try {\n    val i = 10 / 0\n\n} catch {\n    case ex: Exception => println(ex.getMessage)\n} finally {\n    println("我始终都会执行!")\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_3-抛出异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-抛出异常"}},[s._v("#")]),s._v(" 3 抛出异常")]),s._v(" "),a("ul",[a("li",[s._v("我们也可以在一个方法中，抛出异常。语法格式和Java类似，使用throw new Exception...")]),s._v(" "),a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  def main(args: Array[String]): Unit = {\n    throw new Exception("这是一个异常")\n  }\n\nException in thread "main" java.lang.Exception: 这是一个异常\n\tat ForDemo$.main(ForDemo.scala:3)\n\tat ForDemo.main(ForDemo.scala)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"提取器-extractor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取器-extractor"}},[s._v("#")]),s._v(" 提取器(Extractor)")]),s._v(" "),a("ul",[a("li",[s._v("提取器是从传递给它的对象中提取出构造该对象的参数。(回想样例类进行模式匹配提取参数)")]),s._v(" "),a("li",[s._v("scala 提取器是一个带有unapply方法的对象。\n"),a("ul",[a("li",[s._v("unapply方法算是apply方法的反向操作\n"),a("ul",[a("li",[s._v("unapply接受一个对象，然后从对象中提取值，提取的值通常是用来构造该对象的值。")])])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/scala%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/assets/1552639637165.png#height=267&id=i2X5l&originHeight=267&originWidth=661&originalType=binary&ratio=1&status=done&style=none&width=661",alt:""}})]),s._v(" "),a("p",[a("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/scala%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/assets/1552639674932.png#height=281&id=mcriq&originHeight=281&originWidth=661&originalType=binary&ratio=1&status=done&style=none&width=661",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Student {\n  var name:String = _   // 姓名\n  var age:Int = _       // 年龄\n  \n  // 实现一个辅助构造器\n  def this(name:String, age:Int) = {\n    this()\n    \n    this.name = name\n    this.age = age\n  }\n}\n\nobject Student {\n  def apply(name:String, age:Int): Student = new Student(name, age)\n\n  // 实现一个解构器\n  def unapply(arg: Student): Option[(String, Int)] = Some(arg.name, arg.age))\n}\n\nobject extractor_DEMO {\n  def main(args: Array[String]): Unit = {\n    val zhangsan = Student("张三", 20)\n\n    zhangsan match {\n      case Student(name, age) => println(s"姓名：$name 年龄：$age")\n      case _ => println("未匹配")\n    }\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h2",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),a("ul",[a("li",[s._v("scala和Java一样，类和特质、方法都可以支持泛型。我们在学习集合的时候，一般都会涉及到泛型。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('scala> val list1:List[String] = List("1", "2", "3")\nlist1: List[String] = List(1, 2, 3)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("在scala中，使用方括号来定义类型参数。")])]),s._v(" "),a("h3",{attrs:{id:"定义一个泛型方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义一个泛型方法"}},[s._v("#")]),s._v(" 定义一个泛型方法")]),s._v(" "),a("ul",[a("li",[s._v("不考虑泛型的支持")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  def getMiddle(arr:Array[Int]) = arr(arr.length / 2)\n\n  def main(args: Array[String]): Unit = {\n    val arr1 = Array(1,2,3,4,5)\n\n    println(getMiddle(arr1))\n  }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("考虑泛型的支持")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  def getMiddle[A](arr:Array[A]) = arr(arr.length / 2)\n\n  def main(args: Array[String]): Unit = {\n    val arr1 = Array(1,2,3,4,5)\n    val arr2 = Array("a", "b", "c", "d", "f")\n\n    println(getMiddle[Int](arr1))\n    println(getMiddle[String](arr2))\n\n    // 简写方式\n    println(getMiddle(arr1))\n    println(getMiddle(arr2))\n  }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"定义一个泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义一个泛型类"}},[s._v("#")]),s._v(" 定义一个泛型类")]),s._v(" "),a("ul",[a("li",[s._v("定义一个Pair类包含2个类型不固定的泛型")]),s._v(" "),a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 类名后面的方括号，就表示这个类可以使用两个类型、分别是T和S\n// 这个名字可以任意取\nclass Pair[T, S](val first: T, val second: S)\n\ncase class People(var name:String, val age:Int)\n\nobject Pair {\n def main(args: Array[String]): Unit = {\n\n val p1 = new Pair[String, Int]("张三", 10)\n val p2 = new Pair[String, String]("张三", "1988-02-19")\n val p3 = new Pair[People, People](People("张三", 20), People("李四", 30))\n }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"上下界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下界"}},[s._v("#")]),s._v(" 上下界")]),s._v(" "),a("ul",[a("li",[s._v("在指定泛型类型时，有时需要界定泛型类型的范围，而不是接收任意类型。比如，要求某个泛型类型，必须是某个类的子类，这样在程序中就可以放心的调用父类的方法，程序才能正常的使用与运行.")]),s._v(" "),a("li",[s._v("scala的上下边界特性允许泛型类型是某个类的子类，或者是某个类的父类\n"),a("ul",[a("li",[s._v("1、 U >: T\n"),a("ul",[a("li",[s._v("这是类型下界的定义，也就是U必须是类型T的父类或者是自己本身。")])])]),s._v(" "),a("li",[s._v("2、 U <: T\n"),a("ul",[a("li",[s._v("这是类型上界的定义，也就是U必须是类型T的子类或者是自己本身。")])])])])]),s._v(" "),a("li",[s._v("示例一")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 类名后面的指定泛型的范围 ----上界\nclass Pair1[T <: Person, S <:Person](val first: T, val second: S) {\n  def chat(msg:String) = println(s"${first.name}对${second.name}说: $msg")\n}\n\nclass Person(var name:String, val age:Int)\n\nobject Pair1 {\n  def main(args: Array[String]): Unit = {\n\n  val p3 = new Pair1[Person,Person](new Person("张三", 20), new Person("李四", 30))\n  p3.chat("你好啊！")\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("示例二\n"),a("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/scala%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/assets/1552657709922.png#height=295&id=YaWPd&originHeight=295&originWidth=564&originalType=binary&ratio=1&status=done&style=none&width=564",alt:""}})])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//要控制Person只能和Person、Policeman聊天，但是不能和Superman聊天。此时，还需要给泛型添加一个下界。\n\n//上下界\nclass Pair[T <: Person, S >: Policeman <:Person](val first: T, val second: S) {\n  def chat(msg:String) = println(s"${first.name}对${second.name}说: $msg")\n}\n\nclass Person(var name:String, val age:Int)\nclass Policeman(name:String, age:Int) extends Person(name, age)\nclass Superman(name:String) extends Policeman(name, -1)\n\nobject Pair {\n  def main(args: Array[String]): Unit = {\n\t// 编译错误：第二个参数必须是Person的子类（包括本身）、Policeman的父类（包括本身）\n   val p3 = new Pair[Person,Superman](new Person("张三", 20), new Superman("李四"))\n   p3.chat("你好啊！")\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"协变、逆变、非变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协变、逆变、非变"}},[s._v("#")]),s._v(" 协变、逆变、非变")]),s._v(" "),a("ul",[a("li",[s._v("来一个类型转换的问题")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Pair[T](a:T)\n\nobject Pair {\n  def main(args: Array[String]): Unit = {\n    val p1 = new Pair("hello")\n    // 编译报错，无法将p1转换为p2\n    val p2:Pair[AnyRef] = p1\n\n    println(p2)\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"协变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协变"}},[s._v("#")]),s._v(" "),a("strong",[s._v("协变")])]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("class Pair[+T]，这种情况是协变。类型B是A的子类型，Pair[B]可以认为是Pair[A]的子类型。这种情况，参数化类型的方向和类型的方向是一致的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"逆变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆变"}},[s._v("#")]),s._v(" "),a("strong",[s._v("逆变")])]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("class Pair[-T]，这种情况是逆变。类型B是A的子类型，Pair[A]反过来可以认为是Pair[B]的子类型。这种情况，参数化类型的方向和类型的方向是相反的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"非变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非变"}},[s._v("#")]),s._v(" "),a("strong",[s._v("非变")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://kflys.gitee.io/upic/2020/03/31/uPic/kfly-top/scala%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/assets/1558064807949.png#height=425&id=r5R19&originHeight=425&originWidth=920&originalType=binary&ratio=1&status=done&style=none&width=920",alt:""}})]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("class Pair[T]{}，这种情况就是非变（默认），类型B是A的子类型，Pair[A]和Pair[B]没有任何从属关系，这种情况和Java是一样的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Super\nclass Sub extends Super\n\n//非变\nclass Temp1[A](title: String)\n//协变\nclass Temp2[+A](title: String)\n//逆变\nclass Temp3[-A](title: String)\n\nobject Covariance_demo {\n  def main(args: Array[String]): Unit = {\n    val a = new Sub()\n    // 没有问题，Sub是Super的子类\n    val b:Super = a\n\n    // 非变\n    val t1:Temp1[Sub] = new Temp1[Sub]("测试")\n    // 报错！默认不允许转换\n    // val t2:Temp1[Super] = t1\n\n    // 协变\n    val t3:Temp2[Sub] = new Temp2[Sub]("测试")\n    val t4:Temp2[Super] = t3\n    \n    // 逆变\n    val t5:Temp3[Super] = new Temp3[Super]("测试")\n    val t6:Temp3[Sub] = t5\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("ul",[a("li",[s._v("总结")])]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("C[+T]：如果A是B的子类，那么C[A]是C[B]的子类。\nC[-T]：如果A是B的子类，那么C[B]是C[A]的子类。\nC[T]： 无论A和B是什么关系，C[A]和C[B]没有从属关系。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"隐式转换和隐式参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换和隐式参数"}},[s._v("#")]),s._v(" 隐式转换和隐式参数")]),s._v(" "),a("h3",{attrs:{id:"_1-隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-隐式转换"}},[s._v("#")]),s._v(" 1 隐式转换")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("\tScala提供的隐式转换和隐式参数功能，是非常有特色的功能。是Java等编程语言所没有的功能。它可以允许你手动指定，将某种类型的对象转换成其他类型的对象或者是给一个类增加方法。通过这些功能，可以实现非常强大、特殊的功能。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("隐式转换其核心就是定义一个使用 implicit 关键字修饰的方法 实现把一个原始类转换成目标类，进而可以调用目标类中的方法")])]),s._v(" "),a("h3",{attrs:{id:"_2-隐式参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-隐式参数"}},[s._v("#")]),s._v(" 2 隐式参数")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[s._v("\t所谓的隐式参数，指的是在函数或者方法中，定义一个用implicit修饰的参数，\n此时Scala会尝试找到一个指定类型的用implicit修饰的参数，即隐式值，并注入参数。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("所有的隐式转换和隐式参数必须定义在一个object中")])]),s._v(" "),a("h3",{attrs:{id:"_3-案例演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-案例演示"}},[s._v("#")]),s._v(" 3 案例演示")]),s._v(" "),a("ul",[a("li",[s._v("案例一\n"),a("ul",[a("li",[a("strong",[s._v("让File类具备RichFile类中的read方法")])])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.kfly.implic_demo\n\nimport java.io.File\n\nimport scala.io.Source\n\n//todo:隐式转换案例一:让File类具备RichFile类中的read方法\n\nobject MyPredef{\n  //定义一个隐式转换的方法，实现把File转换成RichFile\n  implicit  def file2RichFile(file:File)=new RichFile(file)\n\n}\n\nclass RichFile(val file:File){\n     //读取数据文件的方法\n    def read():String={\n       Source.fromFile(file).mkString\n    }\n}\n\nobject RichFile{\n  def main(args: Array[String]): Unit = {\n     //1、构建一个File对象\n          val file = new File("E:\\\\aa.txt")\n\n     //2、手动导入隐式转换\n      import MyPredef.file2RichFile\n\n       val data: String = file.read\n        println(data)\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("ul",[a("li",[s._v("案例二\n"),a("ul",[a("li",[a("strong",[s._v("超人变身")])])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.kfly.implic_demo\n\n//todo:隐式转换案例二:超人变身\nclass Man(val name:String)class SuperMan(val name: String) {\n  def heat=print("超人打怪兽")\n}\n\nobject SuperMan{\n  //隐式转换方法\n  implicit def man2SuperMan(man:Man)=new SuperMan(man.name)\n  def main(args: Array[String]) {\n    val hero=new Man("hero")\n    //Man具备了SuperMan的方法\n    hero.heat \n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ul",[a("li",[s._v("案例三\n"),a("ul",[a("li",[a("strong",[s._v("一个类隐式转换成具有相同方法的多个类")])])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package com.kfly.implic_demo\n//todo:隐式转换案例三（一个类隐式转换成具有相同方法的多个类）\nclass Cclass A(c:C) {    \n  def readBook(): Unit ={     \n    println("A说：好书好书...")   \n  }\n}\n\nclass B(c:C){ \n  def readBook(): Unit ={ \n    println("B说：看不懂...") \n  }  \n  \n  def writeBook(): Unit ={   \n    println("B说：不会写...")\n  }\n}\n\nobject AB{  \n  //创建一个类转换为2个类的隐式转换  \n  implicit def C2A(c:C)=new A(c) \n  implicit def C2B(c:C)=new B(c)\n}\n\nobject B{ \n  def main(args: Array[String]) {  \n    //导包    \n    //1. import AB._ 会将AB类下的所有隐式转换导进来 \n    //2. import AB.C2A 只导入C类到A类的的隐式转换方法    \n    //3. import AB.C2B 只导入C类到B类的的隐式转换方法    \n    import AB._    \n    val c=new C    \n    //由于A类与B类中都有readBook()，只能导入其中一个，否则调用共同方法时代码报错    \n    //c.readBook()    \n    //C类可以执行B类中的writeBook()   \n    c.writeBook()  \n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("ul",[a("li",[s._v("案例四\n"),a("ul",[a("li",[a("strong",[s._v("员工领取薪水")])])])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package cn.itcast.implic_demo\n//todo:隐式参数案例四:员工领取薪水\nobject Company{ \n  //在object中定义隐式值    注意：同一类型的隐式值只允许出现一次，否则会报错  \n  implicit  val xxx="zhangsan"  \n  implicit  val yyy=10000.00  \n  implicit  val zzz="lisi"\n}\n\nclass Boss { \n  //定义一个用implicit修饰的参数 类型为String  \n  //注意参数匹配的类型   它需要的是String类型的隐式值  \n  def callName(implicit name:String):String={    \n    name+" is coming !"  \n  }  \n  //定义一个用implicit修饰的参数，类型为Double \n  //注意参数匹配的类型    它需要的是Double类型的隐式值  \n  def getMoney(implicit money:Double):String={    \n    " 当月薪水："+money  \n  }\n}\n\n\nmatch object Boss extends App{ \n  //使用import导入定义好的隐式值，注意：必须先加载否则会报错  \n  import Company.xxx  \n  import Company.yyy  \n  val boss =new Boss  \n  println(boss.callName+boss.getMoney)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);