(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{527:function(s,a,n){"use strict";n.r(a);var e=n(19),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"业务说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#业务说明"}},[s._v("#")]),s._v(" 业务说明：")]),s._v(" "),n("p",[s._v("对于正在出行的订单，我们需要将数据保存起来，实时的实现订单轨迹的监控回放\n数据处理过程：\n1：通过sparkStreaming实现消费kafka当中的数据，然后将海口以及成都数据全部都保存到Hbase对应的表当中去\n2、将海口数据的GPS位置经纬度信息保存到redis当中去，实现实时轨迹监控以及历史轨迹回放等功能\n3、通过Hbase的海口数据，实现虚拟车站的统计功能\n4、自主维护sparkStreaming消费kafka的offset值")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/kflys/uPic/raw/master/uPic/1593619386867-969cc63c-8206-4f96-81f9-5ceb8369904f.png",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"轨迹监控模块开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#轨迹监控模块开发"}},[s._v("#")]),s._v(" 轨迹监控模块开发")]),s._v(" "),n("p",[s._v("通过sparkStreaming程序消费kafak当中的成都以及海口的数据，并将数据保存到redis和hbase当中去，实现实时轨迹监控模块的功能\n在我们的travel_spark模块的scala下面的com.travel.programApp这个package下面，创建scala的object代码StreamingKafka")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import com.travel.common.{ConfigUtil, Constants, HBaseUtil, JedisUtil}\nimport com.travel.loggings.Logging\nimport com.travel.utils.HbaseTools\nimport org.apache.hadoop.hbase.client.{Admin, Connection}\nimport org.apache.hadoop.hbase.{HColumnDescriptor, HTableDescriptor, TableName}\nimport org.apache.kafka.clients.consumer.ConsumerRecord\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.streaming.dstream.InputDStream\nimport org.apache.spark.streaming.kafka010.{HasOffsetRanges, OffsetRange}\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.{SparkConf, SparkContext}\nimport redis.clients.jedis.Jedis\n\nobject StreamingKafka  extends Logging{\n\n  def main(args: Array[String]): Unit = {\n    val brokers = ConfigUtil.getConfig(Constants.KAFKA_BOOTSTRAP_SERVERS)\n    val topics = Array(ConfigUtil.getConfig(Constants.CHENG_DU_GPS_TOPIC),ConfigUtil.getConfig(Constants.HAI_KOU_GPS_TOPIC))\n    val conf = new SparkConf().setMaster("local[1]").setAppName("sparkKafka")\n    val group:String = "gps_consum_group"\n    val kafkaParams = Map[String, Object](\n      "bootstrap.servers" -> brokers,\n      "key.deserializer" -> classOf[StringDeserializer],\n      "value.deserializer" -> classOf[StringDeserializer],\n      "group.id" -> group,\n      "auto.offset.reset" -> "latest",_// earliest,latest,和none_\n      "enable.auto.commit" -> (false: java.lang.Boolean)\n    )\n    val sparkSession: SparkSession = SparkSession.builder().config(conf).getOrCreate()\n    val context: SparkContext = sparkSession.sparkContext\n    context.setLogLevel("WARN")\n   _// val streamingContext = new StreamingContext(conf,Seconds(5))_\n    _//获取streamingContext_\n    val streamingContext: StreamingContext =  new StreamingContext(context,Seconds(1))\n    val result: InputDStream[ConsumerRecord[String, String]] = HbaseTools.getStreamingContextFromHBase(streamingContext,kafkaParams,topics,group,"(.*)gps_topic")\n    _/**_\n_      * 将数据保存到HBase当中去，以及将成都的数据，保存到redis里面去_\n_      */_\n    result.foreachRDD(eachRdd =>{\n      if(!eachRdd.isEmpty()){\n        eachRdd.foreachPartition(eachPartition =>{\n          val connection: Connection = HBaseUtil.getConnection\n          val jedis: Jedis = JedisUtil.getJedis\n          _//判断表是否存在，如果不存在就进行创建_\n          val admin: Admin = connection.getAdmin\n          if(!admin.tableExists(TableName.valueOf(Constants.HTAB_GPS))){\n            val htabgps = new HTableDescriptor(TableName.valueOf(Constants.HTAB_GPS))\n            htabgps.addFamily(new HColumnDescriptor(Constants.DEFAULT_FAMILY))\n            admin.createTable(htabgps)\n          }\n          if(!admin.tableExists(TableName.valueOf(Constants.HTAB_HAIKOU_ORDER))){\n            val htabgps = new HTableDescriptor(TableName.valueOf(Constants.HTAB_HAIKOU_ORDER))\n            htabgps.addFamily(new HColumnDescriptor(Constants.DEFAULT_FAMILY))\n            admin.createTable(htabgps)\n          }\n          eachPartition.foreach(record =>{\n            _//保存到HBase和redis_\n            val consumerRecords: ConsumerRecord[String, String] = HbaseTools.saveToHBaseAndRedis(connection,jedis, record)\n          })\n          JedisUtil.returnJedis(jedis)\n          connection.close()\n        })\n\n        _//更新offset_\n        val offsetRanges: Array[OffsetRange] = eachRdd.asInstanceOf[HasOffsetRanges].offsetRanges\n        _//result.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)  //将offset提交到默认的kafka的topic里面去保存_\n        for(eachrange <-  offsetRanges){\n          val startOffset: Long = eachrange.fromOffset  _//起始offset_\n          val endOffset: Long = eachrange.untilOffset  _//结束offset_\n          val topic: String = eachrange.topic\n          val partition: Int = eachrange.partition\n          HbaseTools.saveBatchOffset(group,topic,partition+"",endOffset)\n        }\n      }\n    })\n    streamingContext.start()\n    streamingContext.awaitTermination()\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br")])]),n("p",[s._v("以上代码将成都以及海口数据保存到了Hbase当中去，并且将海口数据的经纬度数据保存到了redis当中去，我们就可以通过浏览器web界面访问轨迹回放模块，查看轨迹监控的功能模块")])])}),[],!1,null,null,null);a.default=t.exports}}]);